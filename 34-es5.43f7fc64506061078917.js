function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{WxHU:function(e,t,n){"use strict";n.r(t),n.d(t,"TextFieldModule",(function(){return B}));var i,l,a,o,d,r=n("d2mR"),m=n("tyNb"),c=n("3Pt+"),s=n("AytR"),u=n("leug"),b=n("fXoL"),f=n("LuDt"),p=n("w0pw"),h=n("U/DG"),x=n("jhN1"),v=n("9UYg"),g=n("6D23"),y=n("dkiD"),w=n("4G1d"),R=n("o085"),Q=n("xBmo"),M=n("o/N6"),F=n("ofXK"),T=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"isErrorState",value:function(e,t){return!!(e&&e.invalid&&(e.dirty||e.touched||t&&t.submitted))}}]),e}(),S=((l=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"ngOnInit",value:function(){this._componentViewer.template={title:"Text Field",description:"Text fields let users enter and edit text.",references:[{name:"Material Design guidelines: Text Fields",url:"https://material.io/design/components/text-fields.html"},{name:"Material Components Web",url:"https://github.com/material-components/material-components-web/blob/master/packages/mdc-textfield/README.md"}],mdcUrls:[{name:"Sass Mixins",url:"https://github.com/material-components/material-components-web/blob/master/packages/mdc-textfield/README.md#sass-mixins"},{name:"Character Counter Mixins",url:"https://github.com/material-components/material-components-web/blob/master/packages/mdc-textfield/character-counter/README.md#sass-mixins"},{name:"Helper Text Mixins",url:"https://github.com/material-components/material-components-web/blob/master/packages/mdc-textfield/helper-text/README.md#sass-mixins"},{name:"Icon Mixins",url:"https://github.com/material-components/material-components-web/blob/master/packages/mdc-textfield/icon/README.md#sass-mixins"}],code:"import {MdcTextFieldModule} from '@angular-mdc/web/textfield';",sass:"@use '@material/textfield/mdc-text-field';\n@use '@material/textfield';\n@use '@material/form-field/mdc-form-field';"}}}]),e}()).\u0275fac=function(e){return new(e||l)},l.\u0275cmp=b.Fb({type:l,selectors:[["ng-component"]],viewQuery:function(e,t){var n;1&e&&b.tc(u.b,!0),2&e&&b.nc(n=b.ac())&&(t._componentViewer=n.first)},decls:1,vars:0,template:function(e,t){1&e&&b.Mb(0,"component-viewer")},directives:[f.a],encapsulation:2}),l),C=((i=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"ngOnInit",value:function(){this._componentApi.docApi={sections:[{header:"MdcTextField",selectors:["mdc-text-field"],exportedAs:"mdcTextField",categories:[{name:"Properties",items:[{name:"id: string",summary:"Unique id of the element."},{name:"type: TextFieldType",summary:"String specifying the type of control to render.",summaryCode:"type TextFieldType = 'text' | 'search' | 'tel' | 'url' | 'email' | 'password' |\n  'date' | 'month' | 'week' | 'time' | 'datetime-local' | 'number' | 'color';"},{name:"name: string",summary:"Name of the textfield."},{name:"label: string",summary:"Shown to the user when there's no focus or values."},{name:"value: string",summary:"The input element's value."},{name:"outlined: boolean",summary:"Set a border around all sides of the text field."},{name:"fullwidth: boolean",summary:"Set to fullwidth textfield. Do not use outlined to style a full width text field."},{name:"disabled: boolean",summary:"Disables the component."},{name:"prefix: string",summary:"Gets or sets the text content of the prefix, if it exists."},{name:"suffix: string",summary:"Gets or sets the text content of the suffix, if it exists."},{name:"readonly: boolean",summary:"Whether or not the textfield value is editable."},{name:"required: boolean",summary:"Whether the element is required."},{name:"charCounter: boolean",summary:"Character counter is used if there is a character limit. It displays the ratio of characters used and the total character limit.\n                Requires *maxlength* to be set."},{name:"useNativeValidation: boolean",summary:"Sets whether to check native HTML validity state (true, default) or custom validity state when updating styles (false)."},{name:"valid: boolean",summary:"Updates input validity styling using passed value."},{name:"empty: boolean",summary:"Returns whether the control is empty."},{name:"endAligned: boolean",summary:"Styles the text field with an end-aligned input."},{name:"ltrText: boolean",summary:"Styles the text field's text elements (input, prefix, and suffix) as LTR even when the direction is RTL. Useful for RTL languages that use LTR for fractional notations."},{name:"inputmode: TextFieldInputMode",summary:"Provides a hint to browsers for devices with onscreen keyboards to help them decide which keyboard to display.",summaryCode:"type TextFieldInputMode =\n  'verbatim' | 'latin' | 'latin-name' | 'latin-prose' | 'full-width-latin' | 'kana' |\n  'kana-name' | 'katakana' | 'numeric' | 'tel' | 'email' | 'url';"},{name:"autocomplete: string",summary:"Indicates if the input can be automatically completed by the browser, usually by remembering previous values the user has entered."},{name:"tabIndex: number",summary:"Tab index of the text element."},{name:"pattern: string",summary:"Regular expression that the control's value is checked against."},{name:"maxlength: number",summary:"Maxlength of characters allowed to be entered."},{name:"minlength: number",summary:"Specifies the minimum number of characters that the user can enter."},{name:"max: number",summary:"The maximum numeric value for the input."},{name:"min: number",summary:"The minimum numeric value for this input, which must not be greater than its maximum (max attribute) value."},{name:"step: number",summary:"Works with the min and max attributes to limit the increments at which a numeric or date-time value can be set."},{name:"size: number",summary:"The initial size of the control."},{name:"helper: string",summary:"Helper text to display below the input when focused."},{name:"helperPersistent: boolean",summary:"Always show the helper text despite focus."},{name:"validationMessage: string",summary:"Message to show in the error color when the textfield is invalid. (Helper text will not be visible)"}]},{name:"Methods",items:[{name:"focus()",summary:"Sets focus to the input."}]},{name:"Events",items:[{name:"change(value)",summary:"Emitted when an alteration to the element value is committed."},{name:"blur(value)",summary:"Emitted whenever the input loses focus."},{name:"input(value)",summary:"Emitted synchronously when the value has been altered."},{name:"focus(boolean)",summary:"Emitted when the input gains or loses focus."}]}]},{header:"MdcTextFieldIcon",selectors:["mdc-icon[mdcTextFieldIcon]"],exportedAs:"mdcTextFieldIcon",categories:[{name:"Properties",items:[{name:"leading: boolean",summary:"Styles the text field as a text field with a leading icon."},{name:"trailing: boolean\t",summary:"Styles the text field as a text field with a trailing icon."}]}]},{header:"MdcTextarea",summary:"Same properties, methods and events as MdcTextField",selectors:["mdc-textarea"],exportedAs:"mdcTextarea",categories:[{name:"Properties",items:[{name:"rows: number",summary:"Number of rows for this textarea."},{name:"cols: number",summary:"Number of columns for this textarea."},{name:"characterCounter: boolean",summary:"Character counter is used if there is a character limit. It displays the ratio of characters used and the total character limit.\n                maxlength is required on MdcTextArea."}]}]},{header:"MDC_TEXT_FIELD_DEFAULT_OPTIONS",summary:"Injection token that can be used to configure the default options for all text fields within an app.",summaryCode:"const MDC_TEXT_FIELD_DEFAULT_OPTIONS:\n  InjectionToken<MdcTextFieldDefaultOptions>;"}]}}}]),e}()).\u0275fac=function(e){return new(e||i)},i.\u0275cmp=b.Fb({type:i,selectors:[["ng-component"]],viewQuery:function(e,t){var n;1&e&&b.tc(u.a,!0),2&e&&b.nc(n=b.ac())&&(t._componentApi=n.first)},decls:1,vars:0,template:function(e,t){1&e&&b.Mb(0,"component-api")},directives:[p.a],encapsulation:2}),i),k=function e(){_classCallCheck(this,e)},E=[{path:"",component:S,children:[{path:"",redirectTo:"api"},{path:"api",component:C},{path:"examples",component:(a=function(){function e(t,n){_classCallCheck(this,e),this.demoForm=new c.d({username:new c.b({value:null,disabled:!1},[c.p.required,c.p.minLength(3),c.p.maxLength(11)])}),this.matcher=new T,this.waypoint=new k,this.prefilledText="Prefilled",this.inputEvent="",this.changeEvent="",this.focusEvent=!1,this.exampleStandard={html:'<mdc-text-field label="Standard" name="txt-field-standard" required\n  helper="Helper text" helperPersistent>'},this.exampleEvents={html:'<mdc-text-field label="Standard"\n  (input)="onInput($event)"\n  (focus)="onFocus($event)"\n  (change)="onChange($event)"></mdc-text-field>',ts:"onInput(value: any): void {\n  this.inputEvent = value;\n}\n\nonInput(value: any): void {\n  // do something\n}\n\nonChange(value: any): void {\n  // do something\n}\n\nonFocus(focused: boolean): void {\n  // do something\n}"},this.exampleReactive={html:'<form [formGroup]="demoForm" (ngSubmit)="submit(demoForm)" #formDirective="ngForm">\n  <mdc-form-field>\n    <mdc-text-field formControlName="username" label="Username" outlined\n      [errorStateMatcher]="matcher"\n      [validationMessage]="validationMessage"></mdc-text-field>\n  </mdc-form-field>\n  <div class="demo-layout__row">\n    <button mdc-button type="submit">Submit</button>\n    <button mdc-button type="button" (click)="resetForm(formDirective)">Reset</button>\n    <button mdc-button type="button" (click)="demoForm.controls[\'username\'].setValue(\'User-1\')">Set Value</button>\n  </div>\n</form>\n\n<p>Control Valid: {{demoForm.controls[\'username\'].valid}}</p>\n<p>Dirty: {{ demoForm.dirty }}</p>\n<p>Valid: {{ demoForm.valid }}</p>\n<p>Pristine: {{ demoForm.pristine }}</p>\n<p>Touched: {{ demoForm.touched }}</p>\n<p>Value: {{ demoForm.value | json }}</p>',ts:"/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\nmatcher = new MyErrorStateMatcher();\n\ndemoForm = new FormGroup({\n  username: new FormControl(\n    { value: null, disabled: false },\n    [\n      Validators.required,\n      Validators.minLength(3),\n      Validators.maxLength(11)\n    ])\n});\n\nget validationMessage(): string {\n  if (this.demoForm.controls['username'].hasError('minlength')) {\n    return 'Username is not long enough';\n  } else if (this.demoForm.controls['username'].hasError('maxlength')) {\n    return 'Username is max length is 11';\n  } else if (this.demoForm.controls['username'].hasError('required')) {\n    return 'Field is required';\n  }\n  return undefined;\n}\n\nsubmit(f: NgForm | FormGroup) {\n  if (f.invalid) {\n    return;\n  }\n}\n\nresetForm(formDirective: FormGroupDirective) {\n  formDirective.resetForm();\n  this.demoForm.reset();\n}"},this.exampleNumericNgModel={html:'<form #demoWeightForm="ngForm" id="demoWeightForm" (ngSubmit)="submit(demoWeightForm)">\n  <mdc-form-field>\n    <mdc-text-field type="number" name="demoweight" label="Weight" ngModel #demoWeightModel="ngModel"\n      required validationMessage="Field is required"></mdc-text-field>\n  </mdc-form-field>\n</form>\n\n<button mdc-button type="submit" form="demoWeightForm">Submit</button>\n<button mdc-button (click)="demoWeightForm.reset()">Reset</button>\n\n<p>Dirty: {{ demoWeightModel.dirty }}</p>\n<p>Valid: {{ demoWeightForm.valid }}</p>\n<p>Pristine: {{ demoWeightForm.pristine }}</p>\n<p>Touched: {{ demoWeightModel.touched }}</p>\n<p>Value: {{ demoWeightModel.value }}</p>'},this.exampleUsingValue={html:'<mdc-form-field>\n  <mdc-text-field #demoValue label="Enter value" [value]="demoInputValue"\n   required validationMessage="Field is required"></mdc-text-field>\n</mdc-form-field>\n\n<button mdc-button (click)="demoValue.value = null">Reset value</button>\n\n<p>Value: {{demoValue.value}}</p>',ts:"demoInputValue: string;"},this.exampleDensity={html:'<mdc-text-field class="demo-density-text-field" label="Density"></mdc-text-field>\n<mdc-text-field class="demo-density-outlined-text-field" outlined label="Density"></mdc-text-field>\n<mdc-text-field class="demo-density-outlined-text-field-with-leading-icon" outlined label="Event date">\n  <mdc-icon mdcTextFieldIcon leading>event</mdc-icon>\n</mdc-text-field>',sass:"https://raw.githubusercontent.com/trimox/angular-mdc-web/master/demos/src/styles/_text-field.scss"},this.exampleIcons={html:'<mdc-text-field autocomplete="tel" type="tel" label="Phone number">\n  <mdc-icon mdcTextFieldIcon leading>phone</mdc-icon>\n  <mdc-icon mdcTextFieldIcon trailing>event</mdc-icon>\n</mdc-text-field>\n<mdc-text-field type="date" outlined label="Event date">\n  <mdc-icon mdcTextFieldIcon leading>event</mdc-icon>\n</mdc-text-field>\n<mdc-text-field type="date" outlined label="Event date">\n  <button mdc-icon-button mdcTextFieldIcon trailing icon="event"></button>\n</mdc-text-field>\n<mdc-text-field disabled label="Disabled">\n  <mdc-icon mdcTextFieldIcon leading>event</mdc-icon>\n</mdc-text-field>'},this.examplePrefixSuffix={html:'<mdc-text-field label="Currency Value" type="number" prefix="$" suffix=".00"></mdc-text-field>\n<mdc-text-field outlined label="Currency Value" type="number" prefix="$" suffix=".00"></mdc-text-field>\n<mdc-text-field outlined type="number" prefix="$" suffix=".00" endAligned></mdc-text-field>\n\n<div dir="rtl">\n  <mdc-text-field outlined label="Label" type="number"\n    suffix="/100" ltrText></mdc-text-field>\n</div>'},this.exampleSvgIcon={html:'<mdc-text-field outlined label="Svg icon">\n  <mdc-icon mdcTextFieldIcon leading svgIcon="thumbup" class="temporary-workaround-for-text-field-svg"></mdc-icon>\n</mdc-text-field>',ts:"import { DomSanitizer } from '@angular/platform-browser';\nimport { MdcIconRegistry } from '@angular-mdc/web';\n\nconstructor(iconRegistry: MdcIconRegistry, sanitizer: DomSanitizer) {\n  iconRegistry.addSvgIcon(\n    'thumbup', sanitizer.bypassSecurityTrustResourceUrl('/assets/thumbup-icon.svg'));\n}",sass:"https://raw.githubusercontent.com/trimox/angular-mdc-web/master/demos/src/styles/_text-field.scss"},this.exampleShape={html:'<mdc-text-field label="Standard" required class="demo-text-field-custom-colors"></mdc-text-field>\n<mdc-text-field label="Standard" class="demo-shaped-text-field"></mdc-text-field>\n<mdc-text-field label="Standard" outlined class="demo-shaped-text-field--outline"></mdc-text-field>',sass:"https://raw.githubusercontent.com/trimox/angular-mdc-web/master/demos/src/styles/_text-field.scss"},this.exampleNumeric={html:'<mdc-text-field type="number" label="Distance" [(ngModel)]="waypoint.dt"></mdc-text-field>\n\n<p>Model: {{waypoint | json}}</p>',ts:"class Directions {\n  dt: number;\n}\n\nwaypoint = new Directions();"},this.examplePrefilled={html:'<mdc-text-field [(ngModel)]="prefilledText" label="Username"></mdc-text-field>',ts:"prefilledText: string = 'Prefilled';"},this.exampleDateTime={html:'<mdc-text-field type="date" label="Birthday"></mdc-text-field>\n\n<mdc-text-field type="time" label="Time"></mdc-text-field>\n\n<mdc-text-field type="password" label="Password" required outlined></mdc-text-field>\n\n<mdc-text-field type="color" label="Color"></mdc-text-field>'},this.exampleRtl={html:'<mdc-form-field dir="rtl">\n  <mdc-text-field outlined label="Standard">\n    <mdc-icon mdcTextFieldIcon leading>phone</mdc-icon>\n  </mdc-text-field>\n</mdc-form-field>'},this.exampleFullWithSingleLine={html:'<mdc-text-field label="Subject" fullwidth></mdc-text-field>',sass:"https://raw.githubusercontent.com/trimox/angular-mdc-web/master/demos/src/styles/_text-field.scss"},this.exampleNoLabel={html:'<mdc-form-field>\n  <mdc-text-field helper="Helper text"></mdc-text-field>\n</mdc-form-field>\n\n<mdc-form-field>\n  <mdc-text-field outlined helper="Helper text" helperPersistent></mdc-text-field>\n</mdc-form-field>\n\n<mdc-form-field>\n  <mdc-text-field outlined class="demo-shaped-text-field--outline"\n  helper="Helper text" helperPersistent></mdc-text-field>\n</mdc-form-field>\n\n<mdc-form-field>\n  <mdc-text-field outlined required helper="Required with no label"></mdc-text-field>\n</mdc-form-field>\n',sass:"https://raw.githubusercontent.com/trimox/angular-mdc-web/master/demos/src/styles/_text-field.scss"},this.exampleCharacterCounter={html:'<mdc-form-field>\n  <mdc-text-field label="Standard" charCounter maxlength="10">\n  </mdc-text-field>\n</mdc-form-field>\n\n<mdc-form-field>\n  <mdc-text-field outlined charCounter label="Standard" maxlength="10">\n  </mdc-text-field>\n</mdc-form-field>'},t.addSvgIcon("thumbup",n.bypassSecurityTrustResourceUrl(s.a.production?"https://trimox.github.io/angular-mdc-web/assets/thumbup-icon.svg":"/assets/thumbup-icon.svg"))}return _createClass(e,[{key:"onInput",value:function(e){this.inputEvent=e}},{key:"onChange",value:function(e){this.changeEvent=e}},{key:"onFocus",value:function(e){this.focusEvent=e}},{key:"submit",value:function(e){}},{key:"resetForm",value:function(e){e.resetForm(),this.demoForm.reset()}},{key:"alternateColors",value:function(e){if(e.textarea)e.textarea?e.elementRef.nativeElement.classList.contains("demo-textarea")?e.elementRef.nativeElement.classList.remove("demo-textarea"):e.elementRef.nativeElement.classList.add("demo-textarea"):e.elementRef.nativeElement.classList.contains("demo-fullwidth-input")?e.elementRef.nativeElement.classList.remove("demo-fullwidth-input"):e.elementRef.nativeElement.classList.add("demo-fullwidth-input");else{var t="demo-text-field-custom-colors";e.elementRef.nativeElement.classList.contains(t)?e.elementRef.nativeElement.classList.remove(t):e.elementRef.nativeElement.classList.add(t)}}},{key:"validationMessage",get:function(){return this.demoForm.controls.username.hasError("minlength")?"Username is not long enough":this.demoForm.controls.username.hasError("maxlength")?"Username is max length is 11":this.demoForm.controls.username.hasError("required")?"Field is required":void 0}}]),e}(),a.\u0275fac=function(e){return new(e||a)(b.Lb(h.a),b.Lb(x.b))},a.\u0275cmp=b.Fb({type:a,selectors:[["ng-component"]],decls:240,vars:55,consts:[[1,"demo-content"],[1,"demo-layout__row"],["mdc-button","",3,"click"],["label","Standard","name","txt-field-standard","required","","helper","Helper text","helperPersistent",""],["standard",""],[3,"example"],[1,"demo-content__headline"],["label","Standard",3,"input","focus","change"],["mdc-button","",3,"disabled","click"],[3,"formGroup","ngSubmit"],["formDirective","ngForm"],["formControlName","username","label","Username","outlined","",3,"errorStateMatcher","validationMessage"],["demoformInput",""],["mdc-button","","type","submit"],["mdc-button","","type","button",3,"click"],["id","demoWeightForm",3,"ngSubmit"],["demoWeightForm","ngForm"],["type","number","name","demoweight","label","Weight","ngModel","","required","","validationMessage","Field is required"],["demoweight","","demoWeightModel","ngModel"],["mdc-button","","type","submit","form","demoWeightForm"],[1,"demo-container"],["label","Currency Value","type","number","prefix","$","suffix",".00"],["outlined","","label","Currency Value","type","number","prefix","$","suffix",".00"],["outlined","","type","number","prefix","$","suffix",".00","endAligned",""],["endAlignedExample",""],["dir","rtl"],["outlined","","label","Label","type","number","suffix","/100","ltrText",""],["ltrTextExample",""],["label","Standard","charCounter","","maxlength","10"],["outlined","","charCounter","","label","Standard","maxlength","10"],["helper","Helper text"],["outlined","","helper","Helper text","helperPersistent",""],["outlined","","helper","Helper text","helperPersistent","",1,"demo-shaped-text-field--outline"],["outlined","","required","","helper","Required with no label"],["label","Enter value","required","","validationMessage","Field is required",3,"value"],["demoValue",""],["autocomplete","tel","type","tel","label","Phone number"],["mdcTextFieldIcon","","leading",""],["mdcTextFieldIcon","","trailing",""],["type","date","outlined","","label","Event date"],["mdc-icon-button","","mdcTextFieldIcon","","trailing","","icon","event"],["disabled","","label","Disabled"],["outlined","","label","Svg icon"],["mdcTextFieldIcon","","leading","","svgIcon","thumbup",1,"temporary-workaround-for-text-field-svg"],["label","Density",1,"demo-density-text-field"],["outlined","","label","Density",1,"demo-density-outlined-text-field"],["outlined","","label","Event date",1,"demo-density-outlined-text-field-with-leading-icon"],["label","Standard","required","",1,"demo-text-field-custom-colors"],["label","Standard",1,"demo-shaped-text-field"],["label","Standard","outlined","",1,"demo-shaped-text-field--outline"],["type","number","label","Distance",3,"ngModel","ngModelChange"],["label","Username",3,"ngModel","ngModelChange"],["outlined","","label","Standard"],["type","date","label","Birthday"],["type","time","label","Time"],["type","password","label","Password","required","","outlined",""],["type","color","label","Color",2,"width","6rem"],["label","Subject","fullwidth",""],["demofullwidth",""]],template:function(e,t){if(1&e){var n=b.Sb();b.Rb(0,"div",0),b.Rb(1,"div",1),b.Rb(2,"button",2),b.Zb("click",(function(){b.pc(n);var e=b.oc(11);return e.outlined=!e.outlined})),b.wc(3),b.Qb(),b.Rb(4,"button",2),b.Zb("click",(function(){b.pc(n);var e=b.oc(11);return e.required=!e.required})),b.wc(5),b.Qb(),b.Rb(6,"button",2),b.Zb("click",(function(){b.pc(n);var e=b.oc(11);return e.disabled=!e.disabled})),b.wc(7),b.Qb(),b.Rb(8,"button",2),b.Zb("click",(function(){b.pc(n);var e=b.oc(11);return e.readonly=!e.readonly})),b.wc(9),b.Qb(),b.Qb(),b.Mb(10,"mdc-text-field",3,4),b.Mb(12,"example-viewer",5),b.Qb(),b.Rb(13,"div",0),b.Rb(14,"h3",6),b.wc(15,"Input and Change events"),b.Qb(),b.Rb(16,"mdc-text-field",7),b.Zb("input",(function(e){return t.onInput(e)}))("focus",(function(e){return t.onFocus(e)}))("change",(function(e){return t.onChange(e)})),b.Qb(),b.Rb(17,"p"),b.wc(18),b.Qb(),b.Rb(19,"p"),b.wc(20),b.Qb(),b.Rb(21,"p"),b.wc(22),b.Qb(),b.Mb(23,"example-viewer",5),b.Qb(),b.Rb(24,"div",0),b.Rb(25,"h3",6),b.wc(26,"Reactive Form"),b.Qb(),b.Rb(27,"div",1),b.Rb(28,"button",2),b.Zb("click",(function(){b.pc(n);var e=b.oc(38);return e.outlined=!e.outlined})),b.wc(29),b.Qb(),b.Rb(30,"button",2),b.Zb("click",(function(){b.pc(n);var e=b.oc(38);return e.useNativeValidation=!e.useNativeValidation})),b.wc(31),b.Qb(),b.Rb(32,"button",8),b.Zb("click",(function(){return t.demoForm.controls.username.markAsTouched()})),b.wc(33,"Mark touched"),b.Qb(),b.Qb(),b.Rb(34,"form",9,10),b.Zb("ngSubmit",(function(){return t.submit(t.demoForm)})),b.Rb(36,"mdc-form-field"),b.Mb(37,"mdc-text-field",11,12),b.Qb(),b.Rb(39,"div",1),b.Rb(40,"button",13),b.wc(41,"Submit"),b.Qb(),b.Rb(42,"button",14),b.Zb("click",(function(){b.pc(n);var e=b.oc(35);return t.resetForm(e)})),b.wc(43,"Reset"),b.Qb(),b.Rb(44,"button",14),b.Zb("click",(function(){return t.demoForm.controls.username.setValue("User-1")})),b.wc(45,"Set Value"),b.Qb(),b.Qb(),b.Qb(),b.Rb(46,"p"),b.wc(47),b.Qb(),b.Rb(48,"p"),b.wc(49),b.Qb(),b.Rb(50,"p"),b.wc(51),b.Qb(),b.Rb(52,"p"),b.wc(53),b.Qb(),b.Rb(54,"p"),b.wc(55),b.Qb(),b.Rb(56,"p"),b.wc(57),b.ec(58,"json"),b.Qb(),b.Mb(59,"example-viewer",5),b.Qb(),b.Rb(60,"div",0),b.Rb(61,"h3",6),b.wc(62,"Numeric with ngModel Form"),b.Qb(),b.Rb(63,"div",1),b.Rb(64,"button",2),b.Zb("click",(function(){b.pc(n);var e=b.oc(70);return e.outlined=!e.outlined})),b.wc(65),b.Qb(),b.Qb(),b.Rb(66,"form",15,16),b.Zb("ngSubmit",(function(){b.pc(n);var e=b.oc(67);return t.submit(e)})),b.Rb(68,"mdc-form-field"),b.Mb(69,"mdc-text-field",17,18),b.Qb(),b.Qb(),b.Rb(72,"div",1),b.Rb(73,"button",19),b.wc(74,"Submit"),b.Qb(),b.Rb(75,"button",2),b.Zb("click",(function(){return b.pc(n),b.oc(67).reset()})),b.wc(76,"Reset"),b.Qb(),b.Qb(),b.Rb(77,"p"),b.wc(78),b.Qb(),b.Rb(79,"p"),b.wc(80),b.Qb(),b.Rb(81,"p"),b.wc(82),b.Qb(),b.Rb(83,"p"),b.wc(84),b.Qb(),b.Rb(85,"p"),b.wc(86),b.Qb(),b.Mb(87,"example-viewer",5),b.Qb(),b.Rb(88,"div",0),b.Rb(89,"h3",6),b.wc(90,"Prefix and suffix text"),b.Qb(),b.Rb(91,"div",20),b.Mb(92,"mdc-text-field",21),b.Qb(),b.Rb(93,"div",20),b.Mb(94,"mdc-text-field",22),b.Qb(),b.Rb(95,"div",1),b.Rb(96,"button",2),b.Zb("click",(function(){b.pc(n);var e=b.oc(100);return e.endAligned=!e.endAligned})),b.wc(97),b.Qb(),b.Qb(),b.Rb(98,"div",20),b.Mb(99,"mdc-text-field",23,24),b.Qb(),b.Rb(101,"div",1),b.Rb(102,"button",2),b.Zb("click",(function(){b.pc(n);var e=b.oc(107);return e.ltrText=!e.ltrText})),b.wc(103),b.Qb(),b.Qb(),b.Rb(104,"div",20),b.Rb(105,"div",25),b.Mb(106,"mdc-text-field",26,27),b.Qb(),b.Qb(),b.Mb(108,"example-viewer",5),b.Qb(),b.Rb(109,"div",0),b.Rb(110,"h3",6),b.wc(111,"Character Counter"),b.Qb(),b.Rb(112,"div",1),b.Rb(113,"mdc-form-field"),b.Mb(114,"mdc-text-field",28),b.Qb(),b.Rb(115,"mdc-form-field"),b.Mb(116,"mdc-text-field",29),b.Qb(),b.Qb(),b.Mb(117,"example-viewer",5),b.Qb(),b.Rb(118,"div",0),b.Rb(119,"h3",6),b.wc(120,"No Label"),b.Qb(),b.Rb(121,"div",1),b.Rb(122,"mdc-form-field"),b.Mb(123,"mdc-text-field",30),b.Qb(),b.Rb(124,"mdc-form-field"),b.Mb(125,"mdc-text-field",31),b.Qb(),b.Rb(126,"mdc-form-field"),b.Mb(127,"mdc-text-field",32),b.Qb(),b.Qb(),b.Rb(128,"mdc-form-field"),b.Mb(129,"mdc-text-field",33),b.Qb(),b.Mb(130,"example-viewer",5),b.Qb(),b.Rb(131,"div",0),b.Rb(132,"h3",6),b.wc(133,"Using [value]"),b.Qb(),b.Rb(134,"div",1),b.Rb(135,"button",2),b.Zb("click",(function(){b.pc(n);var e=b.oc(139);return e.required=!e.required})),b.wc(136),b.Qb(),b.Qb(),b.Rb(137,"mdc-form-field"),b.Mb(138,"mdc-text-field",34,35),b.Qb(),b.Rb(140,"div",1),b.Rb(141,"button",2),b.Zb("click",(function(){return b.pc(n),b.oc(139).value=null})),b.wc(142,"Reset value"),b.Qb(),b.Qb(),b.Rb(143,"p"),b.wc(144),b.Qb(),b.Mb(145,"example-viewer",5),b.Qb(),b.Rb(146,"div",0),b.Rb(147,"h3",6),b.wc(148,"Leading and Trailing Icons"),b.Qb(),b.Rb(149,"div",20),b.Rb(150,"mdc-text-field",36),b.Rb(151,"mdc-icon",37),b.wc(152,"phone"),b.Qb(),b.Rb(153,"mdc-icon",38),b.wc(154,"event"),b.Qb(),b.Qb(),b.Qb(),b.Rb(155,"div",20),b.Rb(156,"mdc-text-field",39),b.Rb(157,"mdc-icon",37),b.wc(158,"event"),b.Qb(),b.Qb(),b.Qb(),b.Rb(159,"div",20),b.Rb(160,"mdc-text-field",39),b.Mb(161,"button",40),b.Qb(),b.Qb(),b.Rb(162,"div",20),b.Rb(163,"mdc-text-field",41),b.Rb(164,"mdc-icon",37),b.wc(165,"event"),b.Qb(),b.Qb(),b.Qb(),b.Mb(166,"example-viewer",5),b.Qb(),b.Rb(167,"div",0),b.Rb(168,"h3",6),b.wc(169,"Svg Icon"),b.Qb(),b.Rb(170,"div",20),b.Rb(171,"mdc-text-field",42),b.Mb(172,"mdc-icon",43),b.Qb(),b.Qb(),b.Mb(173,"example-viewer",5),b.Qb(),b.Rb(174,"div",0),b.Rb(175,"h3",6),b.wc(176,"Density"),b.Qb(),b.Rb(177,"div",20),b.Mb(178,"mdc-text-field",44),b.Qb(),b.Rb(179,"div",20),b.Mb(180,"mdc-text-field",45),b.Qb(),b.Rb(181,"div",20),b.Rb(182,"mdc-text-field",46),b.Rb(183,"mdc-icon",37),b.wc(184,"event"),b.Qb(),b.Qb(),b.Qb(),b.Mb(185,"example-viewer",5),b.Qb(),b.Rb(186,"div",0),b.Rb(187,"h3",6),b.wc(188,"Shape"),b.Qb(),b.Rb(189,"div",20),b.Mb(190,"mdc-text-field",47),b.Qb(),b.Rb(191,"div",20),b.Mb(192,"mdc-text-field",48),b.Qb(),b.Rb(193,"div",20),b.Mb(194,"mdc-text-field",49),b.Qb(),b.Mb(195,"example-viewer",5),b.Qb(),b.Rb(196,"div",0),b.Rb(197,"h3",6),b.wc(198,"Numeric with ngModel"),b.Qb(),b.Rb(199,"mdc-text-field",50),b.Zb("ngModelChange",(function(e){return t.waypoint.dt=e})),b.Qb(),b.Rb(200,"p"),b.wc(201),b.ec(202,"json"),b.Qb(),b.Mb(203,"example-viewer",5),b.Qb(),b.Rb(204,"div",0),b.Rb(205,"h3",6),b.wc(206,"Prefilled via ngModel"),b.Qb(),b.Rb(207,"mdc-text-field",51),b.Zb("ngModelChange",(function(e){return t.prefilledText=e})),b.Qb(),b.Rb(208,"p"),b.wc(209),b.Mb(210,"example-viewer",5),b.Qb(),b.Qb(),b.Rb(211,"div",0),b.Rb(212,"h3",6),b.wc(213,"RTL"),b.Qb(),b.Rb(214,"mdc-form-field",25),b.Rb(215,"mdc-text-field",52),b.Rb(216,"mdc-icon",37),b.wc(217,"phone"),b.Qb(),b.Qb(),b.Qb(),b.Mb(218,"example-viewer",5),b.Qb(),b.Rb(219,"div",0),b.Rb(220,"h3",6),b.wc(221,"Date / Time / Color / Password"),b.Qb(),b.Rb(222,"div",20),b.Mb(223,"mdc-text-field",53),b.Qb(),b.Rb(224,"div",20),b.Mb(225,"mdc-text-field",54),b.Qb(),b.Rb(226,"div",20),b.Mb(227,"mdc-text-field",55),b.Qb(),b.Rb(228,"div",20),b.Mb(229,"mdc-text-field",56),b.Qb(),b.Mb(230,"example-viewer",5),b.Qb(),b.Rb(231,"div",0),b.Rb(232,"h3",6),b.wc(233,"Full Width"),b.Qb(),b.Rb(234,"div",1),b.Rb(235,"button",2),b.Zb("click",(function(){b.pc(n);var e=b.oc(238);return t.alternateColors(e)})),b.wc(236,"Alternate Colors"),b.Qb(),b.Qb(),b.Mb(237,"mdc-text-field",57,58),b.Mb(239,"example-viewer",5),b.Qb()}if(2&e){var i=b.oc(11),l=b.oc(38),a=b.oc(67),o=b.oc(70),d=b.oc(71),r=b.oc(100),m=b.oc(107),c=b.oc(139);b.Bb(3),b.yc("Outlined: ",i.outlined?"On":"Off",""),b.Bb(2),b.yc("Required: ",i.required?"On":"Off",""),b.Bb(2),b.yc("Disabled: ",i.disabled?"On":"Off",""),b.Bb(2),b.yc("Read Only: ",i.readonly?"On":"Off",""),b.Bb(3),b.ic("example",t.exampleStandard),b.Bb(6),b.yc("Input event: ",t.inputEvent,""),b.Bb(2),b.yc("Change event: ",t.changeEvent,""),b.Bb(2),b.yc("Focus event: ",t.focusEvent,""),b.Bb(1),b.ic("example",t.exampleEvents),b.Bb(6),b.yc("Outlined: ",l.outlined?"On":"Off",""),b.Bb(2),b.yc("Native validation: ",l.useNativeValidation?"On":"Off",""),b.Bb(1),b.ic("disabled",t.demoForm.touched),b.Bb(2),b.ic("formGroup",t.demoForm),b.Bb(3),b.ic("errorStateMatcher",t.matcher)("validationMessage",t.validationMessage),b.Bb(10),b.yc("Control Valid: ",t.demoForm.controls.username.valid,""),b.Bb(2),b.yc("Dirty: ",t.demoForm.dirty,""),b.Bb(2),b.yc("Valid: ",t.demoForm.valid,""),b.Bb(2),b.yc("Pristine: ",t.demoForm.pristine,""),b.Bb(2),b.yc("Touched: ",t.demoForm.touched,""),b.Bb(2),b.yc("Value: ",b.fc(58,51,t.demoForm.value),""),b.Bb(2),b.ic("example",t.exampleReactive),b.Bb(6),b.yc("Outlined: ",o.outlined?"On":"Off",""),b.Bb(13),b.yc("Dirty: ",d.dirty,""),b.Bb(2),b.yc("Valid: ",a.valid,""),b.Bb(2),b.yc("Pristine: ",a.pristine,""),b.Bb(2),b.yc("Touched: ",d.touched,""),b.Bb(2),b.yc("Value: ",d.value,""),b.Bb(1),b.ic("example",t.exampleNumericNgModel),b.Bb(10),b.yc("End Aligned: ",r.endAligned?"On":"Off",""),b.Bb(6),b.yc("LTR Text: ",m.ltrText?"On":"Off",""),b.Bb(5),b.ic("example",t.examplePrefixSuffix),b.Bb(9),b.ic("example",t.exampleCharacterCounter),b.Bb(13),b.ic("example",t.exampleNoLabel),b.Bb(6),b.yc("Required: ",c.required?"On":"Off",""),b.Bb(2),b.ic("value",t.demoInputValue),b.Bb(6),b.yc("Value: ",c.value,""),b.Bb(1),b.ic("example",t.exampleUsingValue),b.Bb(21),b.ic("example",t.exampleIcons),b.Bb(7),b.ic("example",t.exampleSvgIcon),b.Bb(12),b.ic("example",t.exampleDensity),b.Bb(10),b.ic("example",t.exampleShape),b.Bb(4),b.ic("ngModel",t.waypoint.dt),b.Bb(2),b.yc("Model: ",b.fc(202,53,t.waypoint),""),b.Bb(2),b.ic("example",t.exampleNumeric),b.Bb(4),b.ic("ngModel",t.prefilledText),b.Bb(2),b.yc("ngModel: ",t.prefilledText," "),b.Bb(1),b.ic("example",t.examplePrefilled),b.Bb(8),b.ic("example",t.exampleRtl),b.Bb(12),b.ic("example",t.exampleDateTime),b.Bb(9),b.ic("example",t.exampleFullWithSingleLine)}},directives:[v.a,g.a,y.a,c.q,c.k,c.e,w.a,c.j,c.c,c.l,c.m,c.o,R.b,Q.a,M.a],pipes:[F.f],encapsulation:2}),a)}]}],I=((d=function e(){_classCallCheck(this,e)}).\u0275mod=b.Jb({type:d}),d.\u0275inj=b.Ib({factory:function(e){return new(e||d)},imports:[[m.e.forChild(E)],m.e]}),d),B=((o=function e(){_classCallCheck(this,e)}).\u0275mod=b.Jb({type:o}),o.\u0275inj=b.Ib({factory:function(e){return new(e||o)},imports:[[r.a,I]]}),o)}}]);