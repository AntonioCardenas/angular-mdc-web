function _defineProperties(e,c){for(var t=0;t<c.length;t++){var b=c[t];b.enumerable=b.enumerable||!1,b.configurable=!0,"value"in b&&(b.writable=!0),Object.defineProperty(e,b.key,b)}}function _createClass(e,c,t){return c&&_defineProperties(e.prototype,c),t&&_defineProperties(e,t),e}function _classCallCheck(e,c){if(!(e instanceof c))throw new TypeError("Cannot call a class as a function")}(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{"+iFw":function(e,c,t){"use strict";t.r(c),t.d(c,"CheckboxModule",(function(){return v}));var b,o,n,a,i,d,l=t("d2mR"),r=t("tyNb"),s=t("leug"),m=t("fXoL"),h=t("5l+6"),u=t("LuDt"),k=t("uwiL"),p=t("dkiD"),f=t("4G1d"),R=t("9UYg"),Q=((o=function e(){_classCallCheck(this,e)}).\u0275fac=function(e){return new(e||o)},o.\u0275cmp=m.Fb({type:o,selectors:[["ng-component"]],decls:108,vars:0,consts:[[1,"docs-api"],["mdcHeadline6",""],[1,"markdown-code"],["mdcSubtitle2",""]],template:function(e,c){1&e&&(m.Rb(0,"div",0),m.Rb(1,"h3",1),m.wc(2,"MdcCheckbox"),m.Qb(),m.Rb(3,"p"),m.wc(4," Selector: "),m.Rb(5,"span",2),m.wc(6,"mdc-checkbox"),m.Qb(),m.Qb(),m.wc(7," Exported as: "),m.Rb(8,"span",2),m.wc(9,"mdcCheckbox"),m.Qb(),m.Rb(10,"h4",3),m.wc(11,"Properties"),m.Qb(),m.Rb(12,"table"),m.Rb(13,"thead"),m.Rb(14,"tr"),m.Rb(15,"th"),m.wc(16,"Name"),m.Qb(),m.Rb(17,"th"),m.wc(18,"Description"),m.Qb(),m.Qb(),m.Qb(),m.Rb(19,"tbody"),m.Rb(20,"tr"),m.Rb(21,"td"),m.wc(22,"id: string"),m.Qb(),m.Rb(23,"td"),m.wc(24,"Unique Id of the checkbox (auto generated if not supplied)."),m.Qb(),m.Qb(),m.Rb(25,"tr"),m.Rb(26,"td"),m.wc(27,"name: string"),m.Qb(),m.Rb(28,"td"),m.wc(29,"Name of the checkbox."),m.Qb(),m.Qb(),m.Rb(30,"tr"),m.Rb(31,"td"),m.wc(32,"checked: boolean"),m.Qb(),m.Rb(33,"td"),m.wc(34,"Whether the checkbox is checked."),m.Qb(),m.Qb(),m.Rb(35,"tr"),m.Rb(36,"td"),m.wc(37,"value: string"),m.Qb(),m.Rb(38,"td"),m.wc(39,"The value attribute of the native input element."),m.Qb(),m.Qb(),m.Rb(40,"tr"),m.Rb(41,"td"),m.wc(42,"tabIndex: number"),m.Qb(),m.Rb(43,"td"),m.wc(44,"Set the underlying tab index of the checkbox. (Default: 0)"),m.Qb(),m.Qb(),m.Rb(45,"tr"),m.Rb(46,"td"),m.wc(47,"ariaLabel: string"),m.Qb(),m.Rb(48,"td"),m.wc(49,"Used to set the 'aria-label' attribute on the underlying input element."),m.Qb(),m.Qb(),m.Rb(50,"tr"),m.Rb(51,"td"),m.wc(52,"ariaLabelledby: string"),m.Qb(),m.Rb(53,"td"),m.wc(54,"The 'aria-labelledby' attribute takes precedence as the element's text alternative."),m.Qb(),m.Qb(),m.Rb(55,"tr"),m.Rb(56,"td"),m.wc(57,"indeterminate: boolean"),m.Qb(),m.Rb(58,"td"),m.wc(59,"Represent a checkbox with three states (e.g. a nested list of checkable items)."),m.Qb(),m.Qb(),m.Rb(60,"tr"),m.Rb(61,"td"),m.wc(62,"disabled: boolean"),m.Qb(),m.Rb(63,"td"),m.wc(64,"Disables the component."),m.Qb(),m.Qb(),m.Rb(65,"tr"),m.Rb(66,"td"),m.wc(67,"disableRipple: boolean"),m.Qb(),m.Rb(68,"td"),m.wc(69,"Whether ripple ink is disabled."),m.Qb(),m.Qb(),m.Rb(70,"tr"),m.Rb(71,"td"),m.wc(72,"indeterminateToChecked: boolean"),m.Qb(),m.Rb(73,"td"),m.wc(74,"Whether the checkbox should go to checked state or unchecked when toggled from indeterminate state."),m.Qb(),m.Qb(),m.Rb(75,"tr"),m.Rb(76,"td"),m.wc(77,"touch: boolean"),m.Qb(),m.Rb(78,"td"),m.wc(79,"Set the component touch target to 48 x 48 px."),m.Qb(),m.Qb(),m.Qb(),m.Qb(),m.Rb(80,"h4",3),m.wc(81,"Methods"),m.Qb(),m.Rb(82,"table"),m.Rb(83,"tbody"),m.Rb(84,"tr"),m.Rb(85,"td"),m.wc(86,"focus()"),m.Qb(),m.Rb(87,"td"),m.wc(88,"Set focus to the checkbox."),m.Qb(),m.Qb(),m.Rb(89,"tr"),m.Rb(90,"td"),m.wc(91,"toggle(checked?: boolean)"),m.Qb(),m.Rb(92,"td"),m.wc(93,"Toggles checkbox via user action. When it is indeterminate, toggle can go to checked or unchecked, depending on state."),m.Qb(),m.Qb(),m.Qb(),m.Qb(),m.Rb(94,"h4",3),m.wc(95,"Events"),m.Qb(),m.Rb(96,"table"),m.Rb(97,"tbody"),m.Rb(98,"tr"),m.Rb(99,"td"),m.wc(100,"change(source: MdcCheckBox, checked: boolean)"),m.Qb(),m.Rb(101,"td"),m.wc(102,"Event dispatched on checked change."),m.Qb(),m.Qb(),m.Rb(103,"tr"),m.Rb(104,"td"),m.wc(105,"indeterminateChange(source: MdcCheckbox, indeterminate: boolean)"),m.Qb(),m.Rb(106,"td"),m.wc(107,"Emit when checkbox goes in and out of indeterminate state, but not when set to checked."),m.Qb(),m.Qb(),m.Qb(),m.Qb(),m.Qb())},directives:[h.i,h.l],encapsulation:2}),o),x=((b=function e(){_classCallCheck(this,e)}).\u0275fac=function(e){return new(e||b)},b.\u0275cmp=m.Fb({type:b,selectors:[["ng-component"]],decls:31,vars:0,consts:[[1,"docs-api"],["mdcSubtitle2",""]],template:function(e,c){1&e&&(m.Rb(0,"div",0),m.Rb(1,"h4",1),m.wc(2,"Sass Mixins"),m.Qb(),m.Rb(3,"p"),m.wc(4," The following mixins apply only to enabled checkboxes. It is not currently possible to customize the color of a disabled checkbox. "),m.Qb(),m.Rb(5,"table"),m.Rb(6,"thead"),m.Rb(7,"tr"),m.Rb(8,"th"),m.wc(9,"Mixin"),m.Qb(),m.Rb(10,"th"),m.wc(11,"Description"),m.Qb(),m.Qb(),m.Qb(),m.Rb(12,"tbody"),m.Rb(13,"tr"),m.Rb(14,"td"),m.Rb(15,"code"),m.wc(16,"container-colors($unmarked-stroke-color, $unmarked-fill-color, $marked-stroke-color, $marked-fill-color, $generate-keyframes)"),m.Qb(),m.Qb(),m.Rb(17,"td"),m.wc(18,"Generates CSS classes to set and animate the stroke color and/or container fill color of a checkbox"),m.Qb(),m.Qb(),m.Rb(19,"tr"),m.Rb(20,"td"),m.Rb(21,"code"),m.wc(22,"ink-color($color)"),m.Qb(),m.Qb(),m.Rb(23,"td"),m.wc(24,"Sets the ink color of the checked and indeterminate icons"),m.Qb(),m.Qb(),m.Rb(25,"tr"),m.Rb(26,"td"),m.Rb(27,"code"),m.wc(28,"focus-indicator-color($color)"),m.Qb(),m.Qb(),m.Rb(29,"td"),m.wc(30,"Sets the color of the focus indicator"),m.Qb(),m.Qb(),m.Qb(),m.Qb(),m.Qb())},directives:[h.l],encapsulation:2}),b),w=[{path:"",component:(a=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"ngOnInit",value:function(){this._componentViewer.template={title:"Checkbox",description:"Checkboxes allow the user to select one or more items from a set.",references:[{name:"Material Design guidelines: Checkbox",url:"https://material.io/design/components/selection-controls.html#checkboxes"},{name:"Material Components Web",url:"https://github.com/material-components/material-components-web/blob/master/packages/mdc-checkbox/README.md"}],code:"import {MdcCheckboxModule} from '@angular-mdc/web';",sass:"@use '@material/checkbox/mdc-checkbox';\n@use '@material/checkbox';"}}}]),e}(),a.\u0275fac=function(e){return new(e||a)},a.\u0275cmp=m.Fb({type:a,selectors:[["ng-component"]],viewQuery:function(e,c){var t;1&e&&m.tc(s.a,!0),2&e&&m.nc(t=m.ac())&&(c._componentViewer=t.first)},decls:1,vars:0,template:function(e,c){1&e&&m.Mb(0,"component-viewer")},directives:[u.a],encapsulation:2}),a),children:[{path:"",redirectTo:"api"},{path:"api",component:Q},{path:"sass",component:x},{path:"examples",component:(n=function(){function e(){_classCallCheck(this,e),this.exampleSimple={html:'<mdc-checkbox></mdc-checkbox>\n\n<mdc-checkbox checked></mdc-checkbox>\n\n<mdc-checkbox disabled></mdc-checkbox>\n\n<mdc-checkbox checked disabled></mdc-checkbox>\n\n<mdc-checkbox indeterminate></mdc-checkbox>\n\n<mdc-checkbox indeterminate indeterminateToChecked="false"></mdc-checkbox>'},this.exampleLabel={html:"<mdc-form-field>\n  <mdc-checkbox></mdc-checkbox>\n  <label>Label</label>\n</mdc-form-field>\n\n<mdc-form-field>\n  <mdc-checkbox disabled></mdc-checkbox>\n  <label>Disabled</label>\n</mdc-form-field>\n\n<mdc-form-field alignEnd>\n  <mdc-checkbox></mdc-checkbox>\n  <label>Label</label>\n</mdc-form-field>"},this.exampleDynamic={html:'<mdc-form-field #formField>\n  <mdc-checkbox #cb indeterminateToChecked (change)="onChange($event)"></mdc-checkbox>\n  <label>Checkbox value is {{cb.checked}}</label>\n</mdc-form-field>',ts:"import { MdcCheckbox, MdcCheckboxChange } from '@angular-mdc/web';\n\nonChange(event: MdcCheckboxChange) {\n  console.log(event.checked);\n}\n\ntoggle(cb: MdcCheckbox): void {\n  cb.toggle();\n}"},this.exampleTheme={html:'<mdc-form-field>\n  <mdc-checkbox class="demo-checkbox--custom-all"></mdc-checkbox>\n  <label>Custom Stroke/Fill/Ink</label>\n</mdc-form-field>\n\n<mdc-form-field>\n  <mdc-checkbox class="demo-checkbox--custom-stroke-and-fill"></mdc-checkbox>\n  <label>Custom Stroke and Fill</label>\n</mdc-form-field>',sass:"https://raw.githubusercontent.com/trimox/angular-mdc-web/master/demos/src/styles/_checkbox.scss"},this.exampleAccessibility={html:'<div class="mdc-touch-target-wrapper">\n  <mdc-form-field>\n    <mdc-checkbox touch></mdc-checkbox>\n    <label>My Accessible Checkbox</label>\n  </mdc-form-field>\n</div>'}}return _createClass(e,[{key:"onChange",value:function(e){console.log(e.checked)}},{key:"toggle",value:function(e){e.toggle()}}]),e}(),n.\u0275fac=function(e){return new(e||n)},n.\u0275cmp=m.Fb({type:n,selectors:[["ng-component"]],decls:77,vars:10,consts:[[1,"demo-content"],["checked",""],["disabled",""],["checked","","disabled",""],["indeterminate",""],["indeterminate","","indeterminateToChecked","false"],[3,"example"],[1,"demo-layout__column"],[1,"demo-container"],["alignEnd",""],[1,"demo-layout__row"],["mdc-button","",3,"click"],["formField",""],["indeterminateToChecked","",3,"change"],["cb",""],[1,"demo-content__headline"],[1,"demo-checkbox--custom-all"],[1,"demo-checkbox--custom-stroke-and-fill"],[1,"mdc-touch-target-wrapper"],["touch",""]],template:function(e,c){if(1&e){var t=m.Sb();m.Rb(0,"div",0),m.Mb(1,"mdc-checkbox"),m.Mb(2,"mdc-checkbox",1),m.Mb(3,"mdc-checkbox",2),m.Mb(4,"mdc-checkbox",3),m.Mb(5,"mdc-checkbox",4),m.Mb(6,"mdc-checkbox",5),m.Mb(7,"example-viewer",6),m.Qb(),m.Rb(8,"div",0),m.Rb(9,"div",7),m.Rb(10,"div",8),m.Rb(11,"mdc-form-field"),m.Mb(12,"mdc-checkbox"),m.Rb(13,"label"),m.wc(14,"Label"),m.Qb(),m.Qb(),m.Qb(),m.Rb(15,"div",8),m.Rb(16,"mdc-form-field"),m.Mb(17,"mdc-checkbox",2),m.Rb(18,"label"),m.wc(19,"Disabled"),m.Qb(),m.Qb(),m.Qb(),m.Rb(20,"div",8),m.Rb(21,"mdc-form-field",9),m.Mb(22,"mdc-checkbox"),m.Rb(23,"label"),m.wc(24,"Label (RTL)"),m.Qb(),m.Qb(),m.Qb(),m.Qb(),m.Mb(25,"example-viewer",6),m.Qb(),m.Rb(26,"div",0),m.Rb(27,"div",10),m.Rb(28,"button",11),m.Zb("click",(function(){return m.pc(t),m.oc(44).indeterminate=!0})),m.wc(29,"Indeterminate"),m.Qb(),m.Rb(30,"button",11),m.Zb("click",(function(){m.pc(t);var e=m.oc(44);return c.toggle(e)})),m.wc(31,"Toggle"),m.Qb(),m.Qb(),m.Rb(32,"div",10),m.Rb(33,"button",11),m.Zb("click",(function(){m.pc(t);var e=m.oc(44);return e.indeterminateToChecked=!e.indeterminateToChecked})),m.wc(34),m.Qb(),m.Rb(35,"button",11),m.Zb("click",(function(){m.pc(t);var e=m.oc(42);return e.alignEnd=!e.alignEnd})),m.wc(36),m.Qb(),m.Rb(37,"button",11),m.Zb("click",(function(){m.pc(t);var e=m.oc(44);return e.disabled=!e.disabled})),m.wc(38),m.Qb(),m.Rb(39,"button",11),m.Zb("click",(function(){m.pc(t);var e=m.oc(44);return e.disableRipple=!e.disableRipple})),m.wc(40),m.Qb(),m.Qb(),m.Rb(41,"mdc-form-field",null,12),m.Rb(43,"mdc-checkbox",13,14),m.Zb("change",(function(e){return c.onChange(e)})),m.Qb(),m.Rb(45,"label"),m.wc(46),m.Qb(),m.Qb(),m.Mb(47,"example-viewer",6),m.Qb(),m.Rb(48,"div",0),m.Rb(49,"h3",15),m.wc(50,"Theme"),m.Qb(),m.Rb(51,"div",7),m.Rb(52,"div",8),m.Rb(53,"mdc-form-field"),m.Mb(54,"mdc-checkbox",16),m.Rb(55,"label"),m.wc(56,"Custom Stroke/Fill/Ink"),m.Qb(),m.Qb(),m.Qb(),m.Rb(57,"div",8),m.Rb(58,"mdc-form-field"),m.Mb(59,"mdc-checkbox",17),m.Rb(60,"label"),m.wc(61,"Custom Stroke and Fill"),m.Qb(),m.Qb(),m.Qb(),m.Qb(),m.Mb(62,"example-viewer",6),m.Qb(),m.Rb(63,"div",0),m.Rb(64,"h3",15),m.wc(65,"Accessibility"),m.Qb(),m.Rb(66,"p"),m.wc(67," Material Design spec advises that touch targets should be at least 48 x 48 px. To meet this requirement, add the `touch` property. "),m.Qb(),m.Rb(68,"p"),m.wc(69," Note that the outer mdc-touch-target-wrapper element is only necessary if you want to avoid potentially overlapping touch targets on adjacent elements (due to collapsing margins). "),m.Qb(),m.Rb(70,"div",10),m.Rb(71,"div",18),m.Rb(72,"mdc-form-field"),m.Mb(73,"mdc-checkbox",19),m.Rb(74,"label"),m.wc(75,"My Accessible Checkbox"),m.Qb(),m.Qb(),m.Qb(),m.Qb(),m.Mb(76,"example-viewer",6),m.Qb()}if(2&e){var b=m.oc(42),o=m.oc(44);m.Bb(7),m.ic("example",c.exampleSimple),m.Bb(18),m.ic("example",c.exampleLabel),m.Bb(9),m.yc(" Indeterminate To Checked: ",o.indeterminateToChecked?"On":"Off",""),m.Bb(2),m.yc("RTL: ",b.alignEnd?"On":"Off",""),m.Bb(2),m.yc("Disabled: ",o.disabled?"On":"Off",""),m.Bb(2),m.yc("Ripple: ",o.disableRipple?"Off":"On",""),m.Bb(6),m.yc("Checkbox value is ",o.checked,""),m.Bb(1),m.ic("example",c.exampleDynamic),m.Bb(15),m.ic("example",c.exampleTheme),m.Bb(14),m.ic("example",c.exampleAccessibility)}},directives:[k.a,p.a,f.a,R.a],encapsulation:2}),n)}]}],g=((d=function e(){_classCallCheck(this,e)}).\u0275mod=m.Jb({type:d}),d.\u0275inj=m.Ib({factory:function(e){return new(e||d)},imports:[[r.e.forChild(w)],r.e]}),d),v=((i=function e(){_classCallCheck(this,e)}).\u0275mod=m.Jb({type:i}),i.\u0275inj=m.Ib({factory:function(e){return new(e||i)},imports:[[l.a,g]]}),i)},leug:function(e,c,t){"use strict";var b=t("LuDt");t.d(c,"a",(function(){return b.a}))}}]);