function _classCallCheck(e,a){if(!(e instanceof a))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,a){for(var o=0;o<a.length;o++){var t=a[o];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function _createClass(e,a,o){return a&&_defineProperties(e.prototype,a),o&&_defineProperties(e,o),e}(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{jea9:function(e,a,o){"use strict";o.r(a),o.d(a,"RadioModule",(function(){return C}));var t=o("d2mR"),n=o("tyNb"),i=o("leug"),r=o("3Pt+"),s=o("fXoL"),c=o("LuDt"),d=o("w0pw"),l=o("CBIf"),m=o("dkiD"),u=o("4G1d"),b=o("9UYg"),p=o("kDKR"),f=o("ofXK");function h(e,a){if(1&e&&(s.Rb(0,"mdc-form-field"),s.Mb(1,"mdc-radio",17),s.Rb(2,"label"),s.wc(3),s.Qb(),s.Qb()),2&e){var o=a.$implicit;s.Bb(1),s.ic("value",o),s.Bb(2),s.xc(o)}}function v(e,a){if(1&e&&(s.Rb(0,"mdc-form-field"),s.Mb(1,"mdc-radio",17),s.Rb(2,"label"),s.wc(3),s.Qb(),s.Qb()),2&e){var o=a.$implicit;s.Bb(1),s.ic("value",o),s.Bb(2),s.xc(o)}}var g,R,w,y,Q,x=[{path:"",component:(w=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"ngOnInit",value:function(){this._componentViewer.template={title:"Radio Buttons",description:"Radio buttons allow the user to select one option from a set while seeing all available options.",references:[{name:"Material Design guidelines: Radio Buttons",url:"https://material.io/design/components/selection-controls.html#radio-buttons"},{name:"Material Components Web",url:"https://github.com/material-components/material-components-web/blob/master/packages/mdc-radio/README.md"}],mdcUrls:[{name:"Sass Mixins",url:"https://github.com/material-components/material-components-web/tree/master/packages/mdc-radio#style-customization"}],code:"import {MdcRadioModule} from '@angular-mdc/web/radio';",sass:"@use '@material/radio/mdc-radio';\n@use '@material/radio';\n@use '@material/form-field/mdc-form-field';"}}}]),e}(),w.\u0275fac=function(e){return new(e||w)},w.\u0275cmp=s.Fb({type:w,selectors:[["ng-component"]],viewQuery:function(e,a){var o;1&e&&s.tc(i.b,!0),2&e&&s.nc(o=s.ac())&&(a._componentViewer=o.first)},decls:1,vars:0,template:function(e,a){1&e&&s.Mb(0,"component-viewer")},directives:[c.a],encapsulation:2}),w),children:[{path:"",redirectTo:"api"},{path:"api",component:(R=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"ngOnInit",value:function(){this._componentApi.docApi={sections:[{header:"MdcRadio",selectors:["mdc-radio"],exportedAs:"mdcRadio",categories:[{name:"Properties",items:[{name:"id: string",summary:"Unique Id of the radio button (auto generated if not supplied)."},{name:"name: string",summary:"Name of the radio button."},{name:"value: any",summary:"Value of the radio button."},{name:"ariaLabel: string",summary:"Used to set the 'aria-label' attribute on the underlying input element."},{name:"ariaLabelledby: string",summary:"The 'aria-labelledby' attribute takes precedence as the element's text alternative."},{name:"checked: boolean",summary:"Use to verify the checked value."},{name:"disabled: boolean\t",summary:"Disables the component."},{name:"required: boolean",summary:"Whether the radio button is required."},{name:"touch: boolean",summary:"Set the component touch target to 48 x 48 px."}]},{name:"Methods",items:[{name:"focus()",summary:"Set focus to the radio button."}]},{name:"Events",items:[{name:"change(source: MdcRadio, value: any)",summary:"Event emitted when the group value changes. Change events are only emitted when the value changes due to user interaction with a radio button."}]}]},{header:"MdcRadioGroup",selectors:["mdc-radio-group"],exportedAs:"mdcRadioGroup",categories:[{name:"Properties",items:[{name:"name: string",summary:"Name of the radio button group."},{name:"required: boolean",summary:"Whether the radio group is required."},{name:"disabled: boolean",summary:"Whether the radio group is disabled."},{name:"selected: MdcRadio | null",summary:"The currently selected radio button. If set to a new radio button, the radio group value will be updated to match the new selected button."},{name:"value: any",summary:"Value for the radio-group. Should equal the value of the selected radio button if there is a corresponding radio button with a matching value. If there is not such a corresponding radio button, this value persists to be applied in case a new radio button is added with a matching value."}]},{name:"Events",items:[{name:"change(source: MdcRadio, value: any)",summary:"Event emitted when the group value changes. Change events are only emitted when the value changes due to user interaction with a radio button."}]}]}]}}}]),e}(),R.\u0275fac=function(e){return new(e||R)},R.\u0275cmp=s.Fb({type:R,selectors:[["ng-component"]],viewQuery:function(e,a){var o;1&e&&s.tc(i.a,!0),2&e&&s.nc(o=s.ac())&&(a._componentApi=o.first)},decls:1,vars:0,template:function(e,a){1&e&&s.Mb(0,"component-api")},directives:[d.a],encapsulation:2}),R)},{path:"examples",component:(g=function(){function e(){_classCallCheck(this,e),this.seasons=["Winter","Spring","Summer","Autumn"],this.form=new r.d({season:new r.b("Spring")}),this.example1={html:"<mdc-radio></mdc-radio>"},this.exampleRadioSet={html:'<mdc-form-field>\n  <mdc-radio name="demo-radio-set"></mdc-radio>\n  <label>Radio 1</label>\n</mdc-form-field>\n<mdc-form-field>\n  <mdc-radio name="demo-radio-set"></mdc-radio>\n  <label>Radio 2</label>\n</mdc-form-field>'},this.example2={html:'<mdc-form-field [alignEnd]="false">\n  <mdc-radio [disabled]="false" class="demo-radio--custom"></mdc-radio>\n  <label>Radio Button</label>\n</mdc-form-field>',sass:"https://raw.githubusercontent.com/trimox/angular-mdc-web/master/demos/src/styles/_radio.scss"},this.exampleRadioGroup={html:'<mdc-radio-group [(ngModel)]="favoriteSeason">\n  <mdc-form-field *ngFor="let season of seasons">\n    <mdc-radio [value]="season"></mdc-radio>\n    <label>{{season}}</label>\n  </mdc-form-field>\n</mdc-radio-group>\n<p>Your favorite season is: {{favoriteSeason}}</p>',ts:"favoriteSeason: string;\nseasons: string[] = ['Winter', 'Spring', 'Summer', 'Autumn'];"},this.exampleReactive={html:'<form [formGroup]="form">\n  <mdc-radio-group formControlName="season">\n    <mdc-form-field *ngFor="let season of seasons">\n      <mdc-radio [value]="season"></mdc-radio>\n      <label>{{season}}</label>\n    </mdc-form-field>\n  </mdc-radio-group>\n</form>\n<p>Your favorite season is: {{form.controls[\'season\'].value}}</p>',ts:"seasons: string[] = ['Winter', 'Spring', 'Summer', 'Autumn'];\n\nform = new FormGroup({\n  season: new FormControl('Spring'),\n});"},this.exampleAccessibility={html:'<div class="mdc-touch-target-wrapper">\n  <mdc-form-field>\n    <mdc-radio name="demo-radio-set" touch></mdc-radio>\n    <label>My Accessibility Radio</label>\n  </mdc-form-field>\n</div>'}}return _createClass(e,[{key:"alternateColors",value:function(e){var a="demo-radio--custom";e.elementRef.nativeElement.classList.contains(a)?e.elementRef.nativeElement.classList.remove(a):e.elementRef.nativeElement.classList.add(a)}}]),e}(),g.\u0275fac=function(e){return new(e||g)},g.\u0275cmp=s.Fb({type:g,selectors:[["ng-component"]],decls:67,vars:17,consts:[[1,"demo-content"],[3,"example"],["name","demo-radio-set"],[1,"demo-layout__row"],["mdc-button","",3,"click"],[3,"alignEnd"],["demoFormField",""],["demoRadio2",""],[1,"demo-content__headline"],[3,"ngModel","ngModelChange"],["demoRadioGroup",""],[4,"ngFor","ngForOf"],[3,"formGroup"],["formControlName","season"],["demoRadioReactive",""],[1,"mdc-touch-target-wrapper"],["name","demo-radio-set","touch",""],[3,"value"]],template:function(e,a){if(1&e){var o=s.Sb();s.Rb(0,"div",0),s.Mb(1,"mdc-radio"),s.Mb(2,"example-viewer",1),s.Qb(),s.Rb(3,"div",0),s.Rb(4,"mdc-form-field"),s.Mb(5,"mdc-radio",2),s.Rb(6,"label"),s.wc(7,"Radio 1"),s.Qb(),s.Qb(),s.Rb(8,"mdc-form-field"),s.Mb(9,"mdc-radio",2),s.Rb(10,"label"),s.wc(11,"Radio 2"),s.Qb(),s.Qb(),s.Mb(12,"example-viewer",1),s.Qb(),s.Rb(13,"div",0),s.Rb(14,"div",3),s.Rb(15,"button",4),s.Zb("click",(function(){s.pc(o);var e=s.oc(22);return e.alignEnd=!e.alignEnd})),s.wc(16),s.Qb(),s.Rb(17,"button",4),s.Zb("click",(function(){s.pc(o);var e=s.oc(24);return e.disabled=!e.disabled})),s.wc(18),s.Qb(),s.Rb(19,"button",4),s.Zb("click",(function(){s.pc(o);var e=s.oc(24);return a.alternateColors(e)})),s.wc(20,"Alternate Colors"),s.Qb(),s.Qb(),s.Rb(21,"mdc-form-field",5,6),s.Mb(23,"mdc-radio",null,7),s.Rb(25,"label"),s.wc(26,"Radio Button"),s.Qb(),s.Qb(),s.Mb(27,"example-viewer",1),s.Qb(),s.Rb(28,"div",0),s.Rb(29,"h3",8),s.wc(30,"Radio Group"),s.Qb(),s.Rb(31,"div",3),s.Rb(32,"button",4),s.Zb("click",(function(){s.pc(o);var e=s.oc(35);return e.disabled=!e.disabled})),s.wc(33),s.Qb(),s.Qb(),s.Rb(34,"mdc-radio-group",9,10),s.Zb("ngModelChange",(function(e){return a.favoriteSeason=e})),s.uc(36,h,4,2,"mdc-form-field",11),s.Qb(),s.Rb(37,"p"),s.wc(38),s.Qb(),s.Mb(39,"example-viewer",1),s.Qb(),s.Rb(40,"div",0),s.Rb(41,"h3",8),s.wc(42,"Radio Group - Reactive forms"),s.Qb(),s.Rb(43,"div",3),s.Rb(44,"button",4),s.Zb("click",(function(){s.pc(o);var e=s.oc(48);return e.disabled=!e.disabled})),s.wc(45),s.Qb(),s.Qb(),s.Rb(46,"form",12),s.Rb(47,"mdc-radio-group",13,14),s.uc(49,v,4,2,"mdc-form-field",11),s.Qb(),s.Qb(),s.Rb(50,"p"),s.wc(51),s.Qb(),s.Mb(52,"example-viewer",1),s.Qb(),s.Rb(53,"div",0),s.Rb(54,"h3",8),s.wc(55,"Accessibility"),s.Qb(),s.Rb(56,"p"),s.wc(57," Material Design spec advises that touch targets should be at least 48 x 48 px. To meet this requirement, add the `touch` property. "),s.Qb(),s.Rb(58,"p"),s.wc(59," Note that the outer mdc-touch-target-wrapper element is only necessary if you want to avoid potentially overlapping touch targets on adjacent elements (due to collapsing margins). "),s.Qb(),s.Rb(60,"div",3),s.Rb(61,"div",15),s.Rb(62,"mdc-form-field"),s.Mb(63,"mdc-radio",16),s.Rb(64,"label"),s.wc(65,"My Accessibility Radio"),s.Qb(),s.Qb(),s.Qb(),s.Qb(),s.Mb(66,"example-viewer",1),s.Qb()}if(2&e){var t=s.oc(22),n=s.oc(24),i=s.oc(35),r=s.oc(48);s.Bb(2),s.ic("example",a.example1),s.Bb(10),s.ic("example",a.exampleRadioSet),s.Bb(4),s.yc("RTL: ",t.alignEnd?"On":"Off",""),s.Bb(2),s.yc("Disabled: ",n.disabled?"On":"Off",""),s.Bb(3),s.ic("alignEnd",!1),s.Bb(6),s.ic("example",a.example2),s.Bb(6),s.yc("Disabled: ",i.disabled?"On":"Off",""),s.Bb(1),s.ic("ngModel",a.favoriteSeason),s.Bb(2),s.ic("ngForOf",a.seasons),s.Bb(2),s.yc("Your favorite season is: ",a.favoriteSeason,""),s.Bb(1),s.ic("example",a.exampleRadioGroup),s.Bb(6),s.yc("Disabled: ",r.disabled?"On":"Off",""),s.Bb(1),s.ic("formGroup",a.form),s.Bb(3),s.ic("ngForOf",a.seasons),s.Bb(2),s.yc("Your favorite season is: ",a.form.controls.season.value,""),s.Bb(1),s.ic("example",a.exampleReactive),s.Bb(14),s.ic("example",a.exampleAccessibility)}},directives:[l.b,m.a,u.a,b.a,p.a,r.j,r.m,f.j,r.q,r.k,r.e,r.c],encapsulation:2}),g)}]}],M=((Q=function e(){_classCallCheck(this,e)}).\u0275mod=s.Jb({type:Q}),Q.\u0275inj=s.Ib({factory:function(e){return new(e||Q)},imports:[[n.e.forChild(x)],n.e]}),Q),C=((y=function e(){_classCallCheck(this,e)}).\u0275mod=s.Jb({type:y}),y.\u0275inj=s.Ib({factory:function(e){return new(e||y)},imports:[[t.a,M]]}),y)}}]);