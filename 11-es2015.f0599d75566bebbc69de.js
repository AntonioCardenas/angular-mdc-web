(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{"+iFw":function(e,c,t){"use strict";t.r(c),t.d(c,"CheckboxModule",(function(){return k}));var n=t("d2mR"),o=t("tyNb"),a=t("leug"),b=t("fXoL"),i=t("w0pw"),m=t("LuDt"),l=t("uwiL"),d=t("dkiD"),s=t("4G1d"),r=t("9UYg");let h=(()=>{class e{ngOnInit(){this._componentApi.docApi={sections:[{header:"MdcCheckbox",selectors:["mdc-checkbox"],exportedAs:"mdcCheckbox",categories:[{name:"Properties",items:[{name:"id: string",summary:"Unique Id of the checkbox (auto generated if not supplied)."},{name:"name: string",summary:"Name of the checkbox."},{name:"checked: boolean",summary:"Whether the checkbox is checked."},{name:"value: string",summary:"The value attribute of the native input element."},{name:"tabIndex: number\t",summary:"Set the underlying tab index of the checkbox. (Default: 0)"},{name:"ariaLabel: string",summary:"Used to set the 'aria-label' attribute on the underlying input element."},{name:"ariaLabelledby: string",summary:"The 'aria-labelledby' attribute takes precedence as the element's text alternative."},{name:"indeterminate: boolean",summary:"Represent a checkbox with three states (e.g. a nested list of checkable items)."},{name:"disabled: boolean",summary:"Disables the component."},{name:"disableRipple: boolean",summary:"Whether ripple ink is disabled."},{name:"indeterminateToChecked: boolean",summary:"Whether the checkbox should go to checked state or unchecked when toggled from indeterminate state."},{name:"touch: boolean",summary:"Set the component touch target to 48 x 48 px."}]},{name:"Methods",items:[{name:"focus()",summary:"Set focus to the checkbox."},{name:"toggle(checked?: boolean)",summary:"Toggles checkbox via user action. When it is indeterminate, toggle can go to checked or unchecked, depending on state."}]},{name:"Events",items:[{name:"change(source: MdcCheckBox, checked: boolean)",summary:"Event dispatched on checked change."},{name:"indeterminateChange(source: MdcCheckbox, indeterminate: boolean)",summary:"Emit when checkbox goes in and out of indeterminate state, but not when set to checked."}]}]}]}}}return e.\u0275fac=function(c){return new(c||e)},e.\u0275cmp=b.Fb({type:e,selectors:[["ng-component"]],viewQuery:function(e,c){var t;1&e&&b.tc(a.a,!0),2&e&&b.nc(t=b.ac())&&(c._componentApi=t.first)},decls:1,vars:0,template:function(e,c){1&e&&b.Mb(0,"component-api")},directives:[i.a],encapsulation:2}),e})();const u=[{path:"",component:(()=>{class e{ngOnInit(){this._componentViewer.template={title:"Checkbox",description:"Checkboxes allow the user to select one or more items from a set.",references:[{name:"Material Design guidelines: Checkbox",url:"https://material.io/design/components/selection-controls.html#checkboxes"},{name:"Material Components Web",url:"https://github.com/material-components/material-components-web/blob/master/packages/mdc-checkbox/README.md"}],mdcUrls:[{name:"Sass Mixins",url:"https://github.com/material-components/material-components-web/blob/master/packages/mdc-checkbox/README.md#style-customization"}],code:"import {MdcCheckboxModule} from '@angular-mdc/web/checkbox';",sass:"@use '@material/checkbox/mdc-checkbox';\n@use '@material/checkbox';"}}}return e.\u0275fac=function(c){return new(c||e)},e.\u0275cmp=b.Fb({type:e,selectors:[["ng-component"]],viewQuery:function(e,c){var t;1&e&&b.tc(a.b,!0),2&e&&b.nc(t=b.ac())&&(c._componentViewer=t.first)},decls:1,vars:0,template:function(e,c){1&e&&b.Mb(0,"component-viewer")},directives:[m.a],encapsulation:2}),e})(),children:[{path:"",redirectTo:"api"},{path:"api",component:h},{path:"examples",component:(()=>{class e{constructor(){this.exampleSimple={html:'<mdc-checkbox></mdc-checkbox>\n\n<mdc-checkbox checked></mdc-checkbox>\n\n<mdc-checkbox disabled></mdc-checkbox>\n\n<mdc-checkbox checked disabled></mdc-checkbox>\n\n<mdc-checkbox indeterminate></mdc-checkbox>\n\n<mdc-checkbox indeterminate indeterminateToChecked="false"></mdc-checkbox>'},this.exampleLabel={html:"<mdc-form-field>\n  <mdc-checkbox></mdc-checkbox>\n  <label>Label</label>\n</mdc-form-field>\n\n<mdc-form-field>\n  <mdc-checkbox disabled></mdc-checkbox>\n  <label>Disabled</label>\n</mdc-form-field>\n\n<mdc-form-field alignEnd>\n  <mdc-checkbox></mdc-checkbox>\n  <label>Label</label>\n</mdc-form-field>"},this.exampleDynamic={html:'<mdc-form-field #formField>\n  <mdc-checkbox #cb indeterminateToChecked (change)="onChange($event)"></mdc-checkbox>\n  <label>Checkbox value is {{cb.checked}}</label>\n</mdc-form-field>',ts:"import { MdcCheckbox, MdcCheckboxChange } from '@angular-mdc/web';\n\nonChange(event: MdcCheckboxChange) {\n  console.log(event.checked);\n}\n\ntoggle(cb: MdcCheckbox): void {\n  cb.toggle();\n}"},this.exampleTheme={html:'<mdc-form-field>\n  <mdc-checkbox class="demo-checkbox--custom-all"></mdc-checkbox>\n  <label>Custom Stroke/Fill/Ink</label>\n</mdc-form-field>\n\n<mdc-form-field>\n  <mdc-checkbox class="demo-checkbox--custom-stroke-and-fill"></mdc-checkbox>\n  <label>Custom Stroke and Fill</label>\n</mdc-form-field>',sass:"https://raw.githubusercontent.com/trimox/angular-mdc-web/master/demos/src/styles/_checkbox.scss"},this.exampleAccessibility={html:'<div class="mdc-touch-target-wrapper">\n  <mdc-form-field>\n    <mdc-checkbox touch></mdc-checkbox>\n    <label>My Accessible Checkbox</label>\n  </mdc-form-field>\n</div>'}}onChange(e){console.log(e.checked)}toggle(e){e.toggle()}}return e.\u0275fac=function(c){return new(c||e)},e.\u0275cmp=b.Fb({type:e,selectors:[["ng-component"]],decls:77,vars:10,consts:[[1,"demo-content"],["checked",""],["disabled",""],["checked","","disabled",""],["indeterminate",""],["indeterminate","","indeterminateToChecked","false"],[3,"example"],[1,"demo-layout__column"],[1,"demo-container"],["alignEnd",""],[1,"demo-layout__row"],["mdc-button","",3,"click"],["formField",""],["indeterminateToChecked","",3,"change"],["cb",""],[1,"demo-content__headline"],[1,"demo-checkbox--custom-all"],[1,"demo-checkbox--custom-stroke-and-fill"],[1,"mdc-touch-target-wrapper"],["touch",""]],template:function(e,c){if(1&e){const e=b.Sb();b.Rb(0,"div",0),b.Mb(1,"mdc-checkbox"),b.Mb(2,"mdc-checkbox",1),b.Mb(3,"mdc-checkbox",2),b.Mb(4,"mdc-checkbox",3),b.Mb(5,"mdc-checkbox",4),b.Mb(6,"mdc-checkbox",5),b.Mb(7,"example-viewer",6),b.Qb(),b.Rb(8,"div",0),b.Rb(9,"div",7),b.Rb(10,"div",8),b.Rb(11,"mdc-form-field"),b.Mb(12,"mdc-checkbox"),b.Rb(13,"label"),b.wc(14,"Label"),b.Qb(),b.Qb(),b.Qb(),b.Rb(15,"div",8),b.Rb(16,"mdc-form-field"),b.Mb(17,"mdc-checkbox",2),b.Rb(18,"label"),b.wc(19,"Disabled"),b.Qb(),b.Qb(),b.Qb(),b.Rb(20,"div",8),b.Rb(21,"mdc-form-field",9),b.Mb(22,"mdc-checkbox"),b.Rb(23,"label"),b.wc(24,"Label (RTL)"),b.Qb(),b.Qb(),b.Qb(),b.Qb(),b.Mb(25,"example-viewer",6),b.Qb(),b.Rb(26,"div",0),b.Rb(27,"div",10),b.Rb(28,"button",11),b.Zb("click",(function(){return b.pc(e),b.oc(44).indeterminate=!0})),b.wc(29,"Indeterminate"),b.Qb(),b.Rb(30,"button",11),b.Zb("click",(function(){b.pc(e);const t=b.oc(44);return c.toggle(t)})),b.wc(31,"Toggle"),b.Qb(),b.Qb(),b.Rb(32,"div",10),b.Rb(33,"button",11),b.Zb("click",(function(){b.pc(e);const c=b.oc(44);return c.indeterminateToChecked=!c.indeterminateToChecked})),b.wc(34),b.Qb(),b.Rb(35,"button",11),b.Zb("click",(function(){b.pc(e);const c=b.oc(42);return c.alignEnd=!c.alignEnd})),b.wc(36),b.Qb(),b.Rb(37,"button",11),b.Zb("click",(function(){b.pc(e);const c=b.oc(44);return c.disabled=!c.disabled})),b.wc(38),b.Qb(),b.Rb(39,"button",11),b.Zb("click",(function(){b.pc(e);const c=b.oc(44);return c.disableRipple=!c.disableRipple})),b.wc(40),b.Qb(),b.Qb(),b.Rb(41,"mdc-form-field",null,12),b.Rb(43,"mdc-checkbox",13,14),b.Zb("change",(function(e){return c.onChange(e)})),b.Qb(),b.Rb(45,"label"),b.wc(46),b.Qb(),b.Qb(),b.Mb(47,"example-viewer",6),b.Qb(),b.Rb(48,"div",0),b.Rb(49,"h3",15),b.wc(50,"Theme"),b.Qb(),b.Rb(51,"div",7),b.Rb(52,"div",8),b.Rb(53,"mdc-form-field"),b.Mb(54,"mdc-checkbox",16),b.Rb(55,"label"),b.wc(56,"Custom Stroke/Fill/Ink"),b.Qb(),b.Qb(),b.Qb(),b.Rb(57,"div",8),b.Rb(58,"mdc-form-field"),b.Mb(59,"mdc-checkbox",17),b.Rb(60,"label"),b.wc(61,"Custom Stroke and Fill"),b.Qb(),b.Qb(),b.Qb(),b.Qb(),b.Mb(62,"example-viewer",6),b.Qb(),b.Rb(63,"div",0),b.Rb(64,"h3",15),b.wc(65,"Accessibility"),b.Qb(),b.Rb(66,"p"),b.wc(67," Material Design spec advises that touch targets should be at least 48 x 48 px. To meet this requirement, add the `touch` property. "),b.Qb(),b.Rb(68,"p"),b.wc(69," Note that the outer mdc-touch-target-wrapper element is only necessary if you want to avoid potentially overlapping touch targets on adjacent elements (due to collapsing margins). "),b.Qb(),b.Rb(70,"div",10),b.Rb(71,"div",18),b.Rb(72,"mdc-form-field"),b.Mb(73,"mdc-checkbox",19),b.Rb(74,"label"),b.wc(75,"My Accessible Checkbox"),b.Qb(),b.Qb(),b.Qb(),b.Qb(),b.Mb(76,"example-viewer",6),b.Qb()}if(2&e){const e=b.oc(42),t=b.oc(44);b.Bb(7),b.ic("example",c.exampleSimple),b.Bb(18),b.ic("example",c.exampleLabel),b.Bb(9),b.yc(" Indeterminate To Checked: ",t.indeterminateToChecked?"On":"Off",""),b.Bb(2),b.yc("RTL: ",e.alignEnd?"On":"Off",""),b.Bb(2),b.yc("Disabled: ",t.disabled?"On":"Off",""),b.Bb(2),b.yc("Ripple: ",t.disableRipple?"Off":"On",""),b.Bb(6),b.yc("Checkbox value is ",t.checked,""),b.Bb(1),b.ic("example",c.exampleDynamic),b.Bb(15),b.ic("example",c.exampleTheme),b.Bb(14),b.ic("example",c.exampleAccessibility)}},directives:[l.a,d.a,s.a,r.a],encapsulation:2}),e})()}]}];let p=(()=>{class e{}return e.\u0275mod=b.Jb({type:e}),e.\u0275inj=b.Ib({factory:function(c){return new(c||e)},imports:[[o.e.forChild(u)],o.e]}),e})(),k=(()=>{class e{}return e.\u0275mod=b.Jb({type:e}),e.\u0275inj=b.Ib({factory:function(c){return new(c||e)},imports:[[n.a,p]]}),e})()}}]);