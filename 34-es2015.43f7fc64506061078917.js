(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{WxHU:function(e,t,n){"use strict";n.r(t),n.d(t,"TextFieldModule",(function(){return S}));var i=n("d2mR"),l=n("tyNb"),d=n("3Pt+"),o=n("AytR"),a=n("leug"),r=n("fXoL"),m=n("LuDt"),c=n("w0pw"),s=n("U/DG"),b=n("jhN1"),u=n("9UYg"),f=n("6D23"),p=n("dkiD"),h=n("4G1d"),x=n("o085"),v=n("xBmo"),g=n("o/N6"),y=n("ofXK");class w{isErrorState(e,t){return!!(e&&e.invalid&&(e.dirty||e.touched||t&&t.submitted))}}let R=(()=>{class e{ngOnInit(){this._componentViewer.template={title:"Text Field",description:"Text fields let users enter and edit text.",references:[{name:"Material Design guidelines: Text Fields",url:"https://material.io/design/components/text-fields.html"},{name:"Material Components Web",url:"https://github.com/material-components/material-components-web/blob/master/packages/mdc-textfield/README.md"}],mdcUrls:[{name:"Sass Mixins",url:"https://github.com/material-components/material-components-web/blob/master/packages/mdc-textfield/README.md#sass-mixins"},{name:"Character Counter Mixins",url:"https://github.com/material-components/material-components-web/blob/master/packages/mdc-textfield/character-counter/README.md#sass-mixins"},{name:"Helper Text Mixins",url:"https://github.com/material-components/material-components-web/blob/master/packages/mdc-textfield/helper-text/README.md#sass-mixins"},{name:"Icon Mixins",url:"https://github.com/material-components/material-components-web/blob/master/packages/mdc-textfield/icon/README.md#sass-mixins"}],code:"import {MdcTextFieldModule} from '@angular-mdc/web/textfield';",sass:"@use '@material/textfield/mdc-text-field';\n@use '@material/textfield';\n@use '@material/form-field/mdc-form-field';"}}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=r.Fb({type:e,selectors:[["ng-component"]],viewQuery:function(e,t){var n;1&e&&r.tc(a.b,!0),2&e&&r.nc(n=r.ac())&&(t._componentViewer=n.first)},decls:1,vars:0,template:function(e,t){1&e&&r.Mb(0,"component-viewer")},directives:[m.a],encapsulation:2}),e})(),Q=(()=>{class e{ngOnInit(){this._componentApi.docApi={sections:[{header:"MdcTextField",selectors:["mdc-text-field"],exportedAs:"mdcTextField",categories:[{name:"Properties",items:[{name:"id: string",summary:"Unique id of the element."},{name:"type: TextFieldType",summary:"String specifying the type of control to render.",summaryCode:"type TextFieldType = 'text' | 'search' | 'tel' | 'url' | 'email' | 'password' |\n  'date' | 'month' | 'week' | 'time' | 'datetime-local' | 'number' | 'color';"},{name:"name: string",summary:"Name of the textfield."},{name:"label: string",summary:"Shown to the user when there's no focus or values."},{name:"value: string",summary:"The input element's value."},{name:"outlined: boolean",summary:"Set a border around all sides of the text field."},{name:"fullwidth: boolean",summary:"Set to fullwidth textfield. Do not use outlined to style a full width text field."},{name:"disabled: boolean",summary:"Disables the component."},{name:"prefix: string",summary:"Gets or sets the text content of the prefix, if it exists."},{name:"suffix: string",summary:"Gets or sets the text content of the suffix, if it exists."},{name:"readonly: boolean",summary:"Whether or not the textfield value is editable."},{name:"required: boolean",summary:"Whether the element is required."},{name:"charCounter: boolean",summary:"Character counter is used if there is a character limit. It displays the ratio of characters used and the total character limit.\n                Requires *maxlength* to be set."},{name:"useNativeValidation: boolean",summary:"Sets whether to check native HTML validity state (true, default) or custom validity state when updating styles (false)."},{name:"valid: boolean",summary:"Updates input validity styling using passed value."},{name:"empty: boolean",summary:"Returns whether the control is empty."},{name:"endAligned: boolean",summary:"Styles the text field with an end-aligned input."},{name:"ltrText: boolean",summary:"Styles the text field's text elements (input, prefix, and suffix) as LTR even when the direction is RTL. Useful for RTL languages that use LTR for fractional notations."},{name:"inputmode: TextFieldInputMode",summary:"Provides a hint to browsers for devices with onscreen keyboards to help them decide which keyboard to display.",summaryCode:"type TextFieldInputMode =\n  'verbatim' | 'latin' | 'latin-name' | 'latin-prose' | 'full-width-latin' | 'kana' |\n  'kana-name' | 'katakana' | 'numeric' | 'tel' | 'email' | 'url';"},{name:"autocomplete: string",summary:"Indicates if the input can be automatically completed by the browser, usually by remembering previous values the user has entered."},{name:"tabIndex: number",summary:"Tab index of the text element."},{name:"pattern: string",summary:"Regular expression that the control's value is checked against."},{name:"maxlength: number",summary:"Maxlength of characters allowed to be entered."},{name:"minlength: number",summary:"Specifies the minimum number of characters that the user can enter."},{name:"max: number",summary:"The maximum numeric value for the input."},{name:"min: number",summary:"The minimum numeric value for this input, which must not be greater than its maximum (max attribute) value."},{name:"step: number",summary:"Works with the min and max attributes to limit the increments at which a numeric or date-time value can be set."},{name:"size: number",summary:"The initial size of the control."},{name:"helper: string",summary:"Helper text to display below the input when focused."},{name:"helperPersistent: boolean",summary:"Always show the helper text despite focus."},{name:"validationMessage: string",summary:"Message to show in the error color when the textfield is invalid. (Helper text will not be visible)"}]},{name:"Methods",items:[{name:"focus()",summary:"Sets focus to the input."}]},{name:"Events",items:[{name:"change(value)",summary:"Emitted when an alteration to the element value is committed."},{name:"blur(value)",summary:"Emitted whenever the input loses focus."},{name:"input(value)",summary:"Emitted synchronously when the value has been altered."},{name:"focus(boolean)",summary:"Emitted when the input gains or loses focus."}]}]},{header:"MdcTextFieldIcon",selectors:["mdc-icon[mdcTextFieldIcon]"],exportedAs:"mdcTextFieldIcon",categories:[{name:"Properties",items:[{name:"leading: boolean",summary:"Styles the text field as a text field with a leading icon."},{name:"trailing: boolean\t",summary:"Styles the text field as a text field with a trailing icon."}]}]},{header:"MdcTextarea",summary:"Same properties, methods and events as MdcTextField",selectors:["mdc-textarea"],exportedAs:"mdcTextarea",categories:[{name:"Properties",items:[{name:"rows: number",summary:"Number of rows for this textarea."},{name:"cols: number",summary:"Number of columns for this textarea."},{name:"characterCounter: boolean",summary:"Character counter is used if there is a character limit. It displays the ratio of characters used and the total character limit.\n                maxlength is required on MdcTextArea."}]}]},{header:"MDC_TEXT_FIELD_DEFAULT_OPTIONS",summary:"Injection token that can be used to configure the default options for all text fields within an app.",summaryCode:"const MDC_TEXT_FIELD_DEFAULT_OPTIONS:\n  InjectionToken<MdcTextFieldDefaultOptions>;"}]}}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=r.Fb({type:e,selectors:[["ng-component"]],viewQuery:function(e,t){var n;1&e&&r.tc(a.a,!0),2&e&&r.nc(n=r.ac())&&(t._componentApi=n.first)},decls:1,vars:0,template:function(e,t){1&e&&r.Mb(0,"component-api")},directives:[c.a],encapsulation:2}),e})();class M{}const F=[{path:"",component:R,children:[{path:"",redirectTo:"api"},{path:"api",component:Q},{path:"examples",component:(()=>{class e{constructor(e,t){this.demoForm=new d.d({username:new d.b({value:null,disabled:!1},[d.p.required,d.p.minLength(3),d.p.maxLength(11)])}),this.matcher=new w,this.waypoint=new M,this.prefilledText="Prefilled",this.inputEvent="",this.changeEvent="",this.focusEvent=!1,this.exampleStandard={html:'<mdc-text-field label="Standard" name="txt-field-standard" required\n  helper="Helper text" helperPersistent>'},this.exampleEvents={html:'<mdc-text-field label="Standard"\n  (input)="onInput($event)"\n  (focus)="onFocus($event)"\n  (change)="onChange($event)"></mdc-text-field>',ts:"onInput(value: any): void {\n  this.inputEvent = value;\n}\n\nonInput(value: any): void {\n  // do something\n}\n\nonChange(value: any): void {\n  // do something\n}\n\nonFocus(focused: boolean): void {\n  // do something\n}"},this.exampleReactive={html:'<form [formGroup]="demoForm" (ngSubmit)="submit(demoForm)" #formDirective="ngForm">\n  <mdc-form-field>\n    <mdc-text-field formControlName="username" label="Username" outlined\n      [errorStateMatcher]="matcher"\n      [validationMessage]="validationMessage"></mdc-text-field>\n  </mdc-form-field>\n  <div class="demo-layout__row">\n    <button mdc-button type="submit">Submit</button>\n    <button mdc-button type="button" (click)="resetForm(formDirective)">Reset</button>\n    <button mdc-button type="button" (click)="demoForm.controls[\'username\'].setValue(\'User-1\')">Set Value</button>\n  </div>\n</form>\n\n<p>Control Valid: {{demoForm.controls[\'username\'].valid}}</p>\n<p>Dirty: {{ demoForm.dirty }}</p>\n<p>Valid: {{ demoForm.valid }}</p>\n<p>Pristine: {{ demoForm.pristine }}</p>\n<p>Touched: {{ demoForm.touched }}</p>\n<p>Value: {{ demoForm.value | json }}</p>',ts:"/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\nmatcher = new MyErrorStateMatcher();\n\ndemoForm = new FormGroup({\n  username: new FormControl(\n    { value: null, disabled: false },\n    [\n      Validators.required,\n      Validators.minLength(3),\n      Validators.maxLength(11)\n    ])\n});\n\nget validationMessage(): string {\n  if (this.demoForm.controls['username'].hasError('minlength')) {\n    return 'Username is not long enough';\n  } else if (this.demoForm.controls['username'].hasError('maxlength')) {\n    return 'Username is max length is 11';\n  } else if (this.demoForm.controls['username'].hasError('required')) {\n    return 'Field is required';\n  }\n  return undefined;\n}\n\nsubmit(f: NgForm | FormGroup) {\n  if (f.invalid) {\n    return;\n  }\n}\n\nresetForm(formDirective: FormGroupDirective) {\n  formDirective.resetForm();\n  this.demoForm.reset();\n}"},this.exampleNumericNgModel={html:'<form #demoWeightForm="ngForm" id="demoWeightForm" (ngSubmit)="submit(demoWeightForm)">\n  <mdc-form-field>\n    <mdc-text-field type="number" name="demoweight" label="Weight" ngModel #demoWeightModel="ngModel"\n      required validationMessage="Field is required"></mdc-text-field>\n  </mdc-form-field>\n</form>\n\n<button mdc-button type="submit" form="demoWeightForm">Submit</button>\n<button mdc-button (click)="demoWeightForm.reset()">Reset</button>\n\n<p>Dirty: {{ demoWeightModel.dirty }}</p>\n<p>Valid: {{ demoWeightForm.valid }}</p>\n<p>Pristine: {{ demoWeightForm.pristine }}</p>\n<p>Touched: {{ demoWeightModel.touched }}</p>\n<p>Value: {{ demoWeightModel.value }}</p>'},this.exampleUsingValue={html:'<mdc-form-field>\n  <mdc-text-field #demoValue label="Enter value" [value]="demoInputValue"\n   required validationMessage="Field is required"></mdc-text-field>\n</mdc-form-field>\n\n<button mdc-button (click)="demoValue.value = null">Reset value</button>\n\n<p>Value: {{demoValue.value}}</p>',ts:"demoInputValue: string;"},this.exampleDensity={html:'<mdc-text-field class="demo-density-text-field" label="Density"></mdc-text-field>\n<mdc-text-field class="demo-density-outlined-text-field" outlined label="Density"></mdc-text-field>\n<mdc-text-field class="demo-density-outlined-text-field-with-leading-icon" outlined label="Event date">\n  <mdc-icon mdcTextFieldIcon leading>event</mdc-icon>\n</mdc-text-field>',sass:"https://raw.githubusercontent.com/trimox/angular-mdc-web/master/demos/src/styles/_text-field.scss"},this.exampleIcons={html:'<mdc-text-field autocomplete="tel" type="tel" label="Phone number">\n  <mdc-icon mdcTextFieldIcon leading>phone</mdc-icon>\n  <mdc-icon mdcTextFieldIcon trailing>event</mdc-icon>\n</mdc-text-field>\n<mdc-text-field type="date" outlined label="Event date">\n  <mdc-icon mdcTextFieldIcon leading>event</mdc-icon>\n</mdc-text-field>\n<mdc-text-field type="date" outlined label="Event date">\n  <button mdc-icon-button mdcTextFieldIcon trailing icon="event"></button>\n</mdc-text-field>\n<mdc-text-field disabled label="Disabled">\n  <mdc-icon mdcTextFieldIcon leading>event</mdc-icon>\n</mdc-text-field>'},this.examplePrefixSuffix={html:'<mdc-text-field label="Currency Value" type="number" prefix="$" suffix=".00"></mdc-text-field>\n<mdc-text-field outlined label="Currency Value" type="number" prefix="$" suffix=".00"></mdc-text-field>\n<mdc-text-field outlined type="number" prefix="$" suffix=".00" endAligned></mdc-text-field>\n\n<div dir="rtl">\n  <mdc-text-field outlined label="Label" type="number"\n    suffix="/100" ltrText></mdc-text-field>\n</div>'},this.exampleSvgIcon={html:'<mdc-text-field outlined label="Svg icon">\n  <mdc-icon mdcTextFieldIcon leading svgIcon="thumbup" class="temporary-workaround-for-text-field-svg"></mdc-icon>\n</mdc-text-field>',ts:"import { DomSanitizer } from '@angular/platform-browser';\nimport { MdcIconRegistry } from '@angular-mdc/web';\n\nconstructor(iconRegistry: MdcIconRegistry, sanitizer: DomSanitizer) {\n  iconRegistry.addSvgIcon(\n    'thumbup', sanitizer.bypassSecurityTrustResourceUrl('/assets/thumbup-icon.svg'));\n}",sass:"https://raw.githubusercontent.com/trimox/angular-mdc-web/master/demos/src/styles/_text-field.scss"},this.exampleShape={html:'<mdc-text-field label="Standard" required class="demo-text-field-custom-colors"></mdc-text-field>\n<mdc-text-field label="Standard" class="demo-shaped-text-field"></mdc-text-field>\n<mdc-text-field label="Standard" outlined class="demo-shaped-text-field--outline"></mdc-text-field>',sass:"https://raw.githubusercontent.com/trimox/angular-mdc-web/master/demos/src/styles/_text-field.scss"},this.exampleNumeric={html:'<mdc-text-field type="number" label="Distance" [(ngModel)]="waypoint.dt"></mdc-text-field>\n\n<p>Model: {{waypoint | json}}</p>',ts:"class Directions {\n  dt: number;\n}\n\nwaypoint = new Directions();"},this.examplePrefilled={html:'<mdc-text-field [(ngModel)]="prefilledText" label="Username"></mdc-text-field>',ts:"prefilledText: string = 'Prefilled';"},this.exampleDateTime={html:'<mdc-text-field type="date" label="Birthday"></mdc-text-field>\n\n<mdc-text-field type="time" label="Time"></mdc-text-field>\n\n<mdc-text-field type="password" label="Password" required outlined></mdc-text-field>\n\n<mdc-text-field type="color" label="Color"></mdc-text-field>'},this.exampleRtl={html:'<mdc-form-field dir="rtl">\n  <mdc-text-field outlined label="Standard">\n    <mdc-icon mdcTextFieldIcon leading>phone</mdc-icon>\n  </mdc-text-field>\n</mdc-form-field>'},this.exampleFullWithSingleLine={html:'<mdc-text-field label="Subject" fullwidth></mdc-text-field>',sass:"https://raw.githubusercontent.com/trimox/angular-mdc-web/master/demos/src/styles/_text-field.scss"},this.exampleNoLabel={html:'<mdc-form-field>\n  <mdc-text-field helper="Helper text"></mdc-text-field>\n</mdc-form-field>\n\n<mdc-form-field>\n  <mdc-text-field outlined helper="Helper text" helperPersistent></mdc-text-field>\n</mdc-form-field>\n\n<mdc-form-field>\n  <mdc-text-field outlined class="demo-shaped-text-field--outline"\n  helper="Helper text" helperPersistent></mdc-text-field>\n</mdc-form-field>\n\n<mdc-form-field>\n  <mdc-text-field outlined required helper="Required with no label"></mdc-text-field>\n</mdc-form-field>\n',sass:"https://raw.githubusercontent.com/trimox/angular-mdc-web/master/demos/src/styles/_text-field.scss"},this.exampleCharacterCounter={html:'<mdc-form-field>\n  <mdc-text-field label="Standard" charCounter maxlength="10">\n  </mdc-text-field>\n</mdc-form-field>\n\n<mdc-form-field>\n  <mdc-text-field outlined charCounter label="Standard" maxlength="10">\n  </mdc-text-field>\n</mdc-form-field>'},e.addSvgIcon("thumbup",t.bypassSecurityTrustResourceUrl(o.a.production?"https://trimox.github.io/angular-mdc-web/assets/thumbup-icon.svg":"/assets/thumbup-icon.svg"))}onInput(e){this.inputEvent=e}onChange(e){this.changeEvent=e}onFocus(e){this.focusEvent=e}submit(e){}get validationMessage(){return this.demoForm.controls.username.hasError("minlength")?"Username is not long enough":this.demoForm.controls.username.hasError("maxlength")?"Username is max length is 11":this.demoForm.controls.username.hasError("required")?"Field is required":void 0}resetForm(e){e.resetForm(),this.demoForm.reset()}alternateColors(e){if(e.textarea)if(e.textarea){const t="demo-textarea";e.elementRef.nativeElement.classList.contains(t)?e.elementRef.nativeElement.classList.remove(t):e.elementRef.nativeElement.classList.add(t)}else{const t="demo-fullwidth-input";e.elementRef.nativeElement.classList.contains(t)?e.elementRef.nativeElement.classList.remove(t):e.elementRef.nativeElement.classList.add(t)}else{const t="demo-text-field-custom-colors";e.elementRef.nativeElement.classList.contains(t)?e.elementRef.nativeElement.classList.remove(t):e.elementRef.nativeElement.classList.add(t)}}}return e.\u0275fac=function(t){return new(t||e)(r.Lb(s.a),r.Lb(b.b))},e.\u0275cmp=r.Fb({type:e,selectors:[["ng-component"]],decls:240,vars:55,consts:[[1,"demo-content"],[1,"demo-layout__row"],["mdc-button","",3,"click"],["label","Standard","name","txt-field-standard","required","","helper","Helper text","helperPersistent",""],["standard",""],[3,"example"],[1,"demo-content__headline"],["label","Standard",3,"input","focus","change"],["mdc-button","",3,"disabled","click"],[3,"formGroup","ngSubmit"],["formDirective","ngForm"],["formControlName","username","label","Username","outlined","",3,"errorStateMatcher","validationMessage"],["demoformInput",""],["mdc-button","","type","submit"],["mdc-button","","type","button",3,"click"],["id","demoWeightForm",3,"ngSubmit"],["demoWeightForm","ngForm"],["type","number","name","demoweight","label","Weight","ngModel","","required","","validationMessage","Field is required"],["demoweight","","demoWeightModel","ngModel"],["mdc-button","","type","submit","form","demoWeightForm"],[1,"demo-container"],["label","Currency Value","type","number","prefix","$","suffix",".00"],["outlined","","label","Currency Value","type","number","prefix","$","suffix",".00"],["outlined","","type","number","prefix","$","suffix",".00","endAligned",""],["endAlignedExample",""],["dir","rtl"],["outlined","","label","Label","type","number","suffix","/100","ltrText",""],["ltrTextExample",""],["label","Standard","charCounter","","maxlength","10"],["outlined","","charCounter","","label","Standard","maxlength","10"],["helper","Helper text"],["outlined","","helper","Helper text","helperPersistent",""],["outlined","","helper","Helper text","helperPersistent","",1,"demo-shaped-text-field--outline"],["outlined","","required","","helper","Required with no label"],["label","Enter value","required","","validationMessage","Field is required",3,"value"],["demoValue",""],["autocomplete","tel","type","tel","label","Phone number"],["mdcTextFieldIcon","","leading",""],["mdcTextFieldIcon","","trailing",""],["type","date","outlined","","label","Event date"],["mdc-icon-button","","mdcTextFieldIcon","","trailing","","icon","event"],["disabled","","label","Disabled"],["outlined","","label","Svg icon"],["mdcTextFieldIcon","","leading","","svgIcon","thumbup",1,"temporary-workaround-for-text-field-svg"],["label","Density",1,"demo-density-text-field"],["outlined","","label","Density",1,"demo-density-outlined-text-field"],["outlined","","label","Event date",1,"demo-density-outlined-text-field-with-leading-icon"],["label","Standard","required","",1,"demo-text-field-custom-colors"],["label","Standard",1,"demo-shaped-text-field"],["label","Standard","outlined","",1,"demo-shaped-text-field--outline"],["type","number","label","Distance",3,"ngModel","ngModelChange"],["label","Username",3,"ngModel","ngModelChange"],["outlined","","label","Standard"],["type","date","label","Birthday"],["type","time","label","Time"],["type","password","label","Password","required","","outlined",""],["type","color","label","Color",2,"width","6rem"],["label","Subject","fullwidth",""],["demofullwidth",""]],template:function(e,t){if(1&e){const e=r.Sb();r.Rb(0,"div",0),r.Rb(1,"div",1),r.Rb(2,"button",2),r.Zb("click",(function(){r.pc(e);const t=r.oc(11);return t.outlined=!t.outlined})),r.wc(3),r.Qb(),r.Rb(4,"button",2),r.Zb("click",(function(){r.pc(e);const t=r.oc(11);return t.required=!t.required})),r.wc(5),r.Qb(),r.Rb(6,"button",2),r.Zb("click",(function(){r.pc(e);const t=r.oc(11);return t.disabled=!t.disabled})),r.wc(7),r.Qb(),r.Rb(8,"button",2),r.Zb("click",(function(){r.pc(e);const t=r.oc(11);return t.readonly=!t.readonly})),r.wc(9),r.Qb(),r.Qb(),r.Mb(10,"mdc-text-field",3,4),r.Mb(12,"example-viewer",5),r.Qb(),r.Rb(13,"div",0),r.Rb(14,"h3",6),r.wc(15,"Input and Change events"),r.Qb(),r.Rb(16,"mdc-text-field",7),r.Zb("input",(function(e){return t.onInput(e)}))("focus",(function(e){return t.onFocus(e)}))("change",(function(e){return t.onChange(e)})),r.Qb(),r.Rb(17,"p"),r.wc(18),r.Qb(),r.Rb(19,"p"),r.wc(20),r.Qb(),r.Rb(21,"p"),r.wc(22),r.Qb(),r.Mb(23,"example-viewer",5),r.Qb(),r.Rb(24,"div",0),r.Rb(25,"h3",6),r.wc(26,"Reactive Form"),r.Qb(),r.Rb(27,"div",1),r.Rb(28,"button",2),r.Zb("click",(function(){r.pc(e);const t=r.oc(38);return t.outlined=!t.outlined})),r.wc(29),r.Qb(),r.Rb(30,"button",2),r.Zb("click",(function(){r.pc(e);const t=r.oc(38);return t.useNativeValidation=!t.useNativeValidation})),r.wc(31),r.Qb(),r.Rb(32,"button",8),r.Zb("click",(function(){return t.demoForm.controls.username.markAsTouched()})),r.wc(33,"Mark touched"),r.Qb(),r.Qb(),r.Rb(34,"form",9,10),r.Zb("ngSubmit",(function(){return t.submit(t.demoForm)})),r.Rb(36,"mdc-form-field"),r.Mb(37,"mdc-text-field",11,12),r.Qb(),r.Rb(39,"div",1),r.Rb(40,"button",13),r.wc(41,"Submit"),r.Qb(),r.Rb(42,"button",14),r.Zb("click",(function(){r.pc(e);const n=r.oc(35);return t.resetForm(n)})),r.wc(43,"Reset"),r.Qb(),r.Rb(44,"button",14),r.Zb("click",(function(){return t.demoForm.controls.username.setValue("User-1")})),r.wc(45,"Set Value"),r.Qb(),r.Qb(),r.Qb(),r.Rb(46,"p"),r.wc(47),r.Qb(),r.Rb(48,"p"),r.wc(49),r.Qb(),r.Rb(50,"p"),r.wc(51),r.Qb(),r.Rb(52,"p"),r.wc(53),r.Qb(),r.Rb(54,"p"),r.wc(55),r.Qb(),r.Rb(56,"p"),r.wc(57),r.ec(58,"json"),r.Qb(),r.Mb(59,"example-viewer",5),r.Qb(),r.Rb(60,"div",0),r.Rb(61,"h3",6),r.wc(62,"Numeric with ngModel Form"),r.Qb(),r.Rb(63,"div",1),r.Rb(64,"button",2),r.Zb("click",(function(){r.pc(e);const t=r.oc(70);return t.outlined=!t.outlined})),r.wc(65),r.Qb(),r.Qb(),r.Rb(66,"form",15,16),r.Zb("ngSubmit",(function(){r.pc(e);const n=r.oc(67);return t.submit(n)})),r.Rb(68,"mdc-form-field"),r.Mb(69,"mdc-text-field",17,18),r.Qb(),r.Qb(),r.Rb(72,"div",1),r.Rb(73,"button",19),r.wc(74,"Submit"),r.Qb(),r.Rb(75,"button",2),r.Zb("click",(function(){return r.pc(e),r.oc(67).reset()})),r.wc(76,"Reset"),r.Qb(),r.Qb(),r.Rb(77,"p"),r.wc(78),r.Qb(),r.Rb(79,"p"),r.wc(80),r.Qb(),r.Rb(81,"p"),r.wc(82),r.Qb(),r.Rb(83,"p"),r.wc(84),r.Qb(),r.Rb(85,"p"),r.wc(86),r.Qb(),r.Mb(87,"example-viewer",5),r.Qb(),r.Rb(88,"div",0),r.Rb(89,"h3",6),r.wc(90,"Prefix and suffix text"),r.Qb(),r.Rb(91,"div",20),r.Mb(92,"mdc-text-field",21),r.Qb(),r.Rb(93,"div",20),r.Mb(94,"mdc-text-field",22),r.Qb(),r.Rb(95,"div",1),r.Rb(96,"button",2),r.Zb("click",(function(){r.pc(e);const t=r.oc(100);return t.endAligned=!t.endAligned})),r.wc(97),r.Qb(),r.Qb(),r.Rb(98,"div",20),r.Mb(99,"mdc-text-field",23,24),r.Qb(),r.Rb(101,"div",1),r.Rb(102,"button",2),r.Zb("click",(function(){r.pc(e);const t=r.oc(107);return t.ltrText=!t.ltrText})),r.wc(103),r.Qb(),r.Qb(),r.Rb(104,"div",20),r.Rb(105,"div",25),r.Mb(106,"mdc-text-field",26,27),r.Qb(),r.Qb(),r.Mb(108,"example-viewer",5),r.Qb(),r.Rb(109,"div",0),r.Rb(110,"h3",6),r.wc(111,"Character Counter"),r.Qb(),r.Rb(112,"div",1),r.Rb(113,"mdc-form-field"),r.Mb(114,"mdc-text-field",28),r.Qb(),r.Rb(115,"mdc-form-field"),r.Mb(116,"mdc-text-field",29),r.Qb(),r.Qb(),r.Mb(117,"example-viewer",5),r.Qb(),r.Rb(118,"div",0),r.Rb(119,"h3",6),r.wc(120,"No Label"),r.Qb(),r.Rb(121,"div",1),r.Rb(122,"mdc-form-field"),r.Mb(123,"mdc-text-field",30),r.Qb(),r.Rb(124,"mdc-form-field"),r.Mb(125,"mdc-text-field",31),r.Qb(),r.Rb(126,"mdc-form-field"),r.Mb(127,"mdc-text-field",32),r.Qb(),r.Qb(),r.Rb(128,"mdc-form-field"),r.Mb(129,"mdc-text-field",33),r.Qb(),r.Mb(130,"example-viewer",5),r.Qb(),r.Rb(131,"div",0),r.Rb(132,"h3",6),r.wc(133,"Using [value]"),r.Qb(),r.Rb(134,"div",1),r.Rb(135,"button",2),r.Zb("click",(function(){r.pc(e);const t=r.oc(139);return t.required=!t.required})),r.wc(136),r.Qb(),r.Qb(),r.Rb(137,"mdc-form-field"),r.Mb(138,"mdc-text-field",34,35),r.Qb(),r.Rb(140,"div",1),r.Rb(141,"button",2),r.Zb("click",(function(){return r.pc(e),r.oc(139).value=null})),r.wc(142,"Reset value"),r.Qb(),r.Qb(),r.Rb(143,"p"),r.wc(144),r.Qb(),r.Mb(145,"example-viewer",5),r.Qb(),r.Rb(146,"div",0),r.Rb(147,"h3",6),r.wc(148,"Leading and Trailing Icons"),r.Qb(),r.Rb(149,"div",20),r.Rb(150,"mdc-text-field",36),r.Rb(151,"mdc-icon",37),r.wc(152,"phone"),r.Qb(),r.Rb(153,"mdc-icon",38),r.wc(154,"event"),r.Qb(),r.Qb(),r.Qb(),r.Rb(155,"div",20),r.Rb(156,"mdc-text-field",39),r.Rb(157,"mdc-icon",37),r.wc(158,"event"),r.Qb(),r.Qb(),r.Qb(),r.Rb(159,"div",20),r.Rb(160,"mdc-text-field",39),r.Mb(161,"button",40),r.Qb(),r.Qb(),r.Rb(162,"div",20),r.Rb(163,"mdc-text-field",41),r.Rb(164,"mdc-icon",37),r.wc(165,"event"),r.Qb(),r.Qb(),r.Qb(),r.Mb(166,"example-viewer",5),r.Qb(),r.Rb(167,"div",0),r.Rb(168,"h3",6),r.wc(169,"Svg Icon"),r.Qb(),r.Rb(170,"div",20),r.Rb(171,"mdc-text-field",42),r.Mb(172,"mdc-icon",43),r.Qb(),r.Qb(),r.Mb(173,"example-viewer",5),r.Qb(),r.Rb(174,"div",0),r.Rb(175,"h3",6),r.wc(176,"Density"),r.Qb(),r.Rb(177,"div",20),r.Mb(178,"mdc-text-field",44),r.Qb(),r.Rb(179,"div",20),r.Mb(180,"mdc-text-field",45),r.Qb(),r.Rb(181,"div",20),r.Rb(182,"mdc-text-field",46),r.Rb(183,"mdc-icon",37),r.wc(184,"event"),r.Qb(),r.Qb(),r.Qb(),r.Mb(185,"example-viewer",5),r.Qb(),r.Rb(186,"div",0),r.Rb(187,"h3",6),r.wc(188,"Shape"),r.Qb(),r.Rb(189,"div",20),r.Mb(190,"mdc-text-field",47),r.Qb(),r.Rb(191,"div",20),r.Mb(192,"mdc-text-field",48),r.Qb(),r.Rb(193,"div",20),r.Mb(194,"mdc-text-field",49),r.Qb(),r.Mb(195,"example-viewer",5),r.Qb(),r.Rb(196,"div",0),r.Rb(197,"h3",6),r.wc(198,"Numeric with ngModel"),r.Qb(),r.Rb(199,"mdc-text-field",50),r.Zb("ngModelChange",(function(e){return t.waypoint.dt=e})),r.Qb(),r.Rb(200,"p"),r.wc(201),r.ec(202,"json"),r.Qb(),r.Mb(203,"example-viewer",5),r.Qb(),r.Rb(204,"div",0),r.Rb(205,"h3",6),r.wc(206,"Prefilled via ngModel"),r.Qb(),r.Rb(207,"mdc-text-field",51),r.Zb("ngModelChange",(function(e){return t.prefilledText=e})),r.Qb(),r.Rb(208,"p"),r.wc(209),r.Mb(210,"example-viewer",5),r.Qb(),r.Qb(),r.Rb(211,"div",0),r.Rb(212,"h3",6),r.wc(213,"RTL"),r.Qb(),r.Rb(214,"mdc-form-field",25),r.Rb(215,"mdc-text-field",52),r.Rb(216,"mdc-icon",37),r.wc(217,"phone"),r.Qb(),r.Qb(),r.Qb(),r.Mb(218,"example-viewer",5),r.Qb(),r.Rb(219,"div",0),r.Rb(220,"h3",6),r.wc(221,"Date / Time / Color / Password"),r.Qb(),r.Rb(222,"div",20),r.Mb(223,"mdc-text-field",53),r.Qb(),r.Rb(224,"div",20),r.Mb(225,"mdc-text-field",54),r.Qb(),r.Rb(226,"div",20),r.Mb(227,"mdc-text-field",55),r.Qb(),r.Rb(228,"div",20),r.Mb(229,"mdc-text-field",56),r.Qb(),r.Mb(230,"example-viewer",5),r.Qb(),r.Rb(231,"div",0),r.Rb(232,"h3",6),r.wc(233,"Full Width"),r.Qb(),r.Rb(234,"div",1),r.Rb(235,"button",2),r.Zb("click",(function(){r.pc(e);const n=r.oc(238);return t.alternateColors(n)})),r.wc(236,"Alternate Colors"),r.Qb(),r.Qb(),r.Mb(237,"mdc-text-field",57,58),r.Mb(239,"example-viewer",5),r.Qb()}if(2&e){const e=r.oc(11),n=r.oc(38),i=r.oc(67),l=r.oc(70),d=r.oc(71),o=r.oc(100),a=r.oc(107),m=r.oc(139);r.Bb(3),r.yc("Outlined: ",e.outlined?"On":"Off",""),r.Bb(2),r.yc("Required: ",e.required?"On":"Off",""),r.Bb(2),r.yc("Disabled: ",e.disabled?"On":"Off",""),r.Bb(2),r.yc("Read Only: ",e.readonly?"On":"Off",""),r.Bb(3),r.ic("example",t.exampleStandard),r.Bb(6),r.yc("Input event: ",t.inputEvent,""),r.Bb(2),r.yc("Change event: ",t.changeEvent,""),r.Bb(2),r.yc("Focus event: ",t.focusEvent,""),r.Bb(1),r.ic("example",t.exampleEvents),r.Bb(6),r.yc("Outlined: ",n.outlined?"On":"Off",""),r.Bb(2),r.yc("Native validation: ",n.useNativeValidation?"On":"Off",""),r.Bb(1),r.ic("disabled",t.demoForm.touched),r.Bb(2),r.ic("formGroup",t.demoForm),r.Bb(3),r.ic("errorStateMatcher",t.matcher)("validationMessage",t.validationMessage),r.Bb(10),r.yc("Control Valid: ",t.demoForm.controls.username.valid,""),r.Bb(2),r.yc("Dirty: ",t.demoForm.dirty,""),r.Bb(2),r.yc("Valid: ",t.demoForm.valid,""),r.Bb(2),r.yc("Pristine: ",t.demoForm.pristine,""),r.Bb(2),r.yc("Touched: ",t.demoForm.touched,""),r.Bb(2),r.yc("Value: ",r.fc(58,51,t.demoForm.value),""),r.Bb(2),r.ic("example",t.exampleReactive),r.Bb(6),r.yc("Outlined: ",l.outlined?"On":"Off",""),r.Bb(13),r.yc("Dirty: ",d.dirty,""),r.Bb(2),r.yc("Valid: ",i.valid,""),r.Bb(2),r.yc("Pristine: ",i.pristine,""),r.Bb(2),r.yc("Touched: ",d.touched,""),r.Bb(2),r.yc("Value: ",d.value,""),r.Bb(1),r.ic("example",t.exampleNumericNgModel),r.Bb(10),r.yc("End Aligned: ",o.endAligned?"On":"Off",""),r.Bb(6),r.yc("LTR Text: ",a.ltrText?"On":"Off",""),r.Bb(5),r.ic("example",t.examplePrefixSuffix),r.Bb(9),r.ic("example",t.exampleCharacterCounter),r.Bb(13),r.ic("example",t.exampleNoLabel),r.Bb(6),r.yc("Required: ",m.required?"On":"Off",""),r.Bb(2),r.ic("value",t.demoInputValue),r.Bb(6),r.yc("Value: ",m.value,""),r.Bb(1),r.ic("example",t.exampleUsingValue),r.Bb(21),r.ic("example",t.exampleIcons),r.Bb(7),r.ic("example",t.exampleSvgIcon),r.Bb(12),r.ic("example",t.exampleDensity),r.Bb(10),r.ic("example",t.exampleShape),r.Bb(4),r.ic("ngModel",t.waypoint.dt),r.Bb(2),r.yc("Model: ",r.fc(202,53,t.waypoint),""),r.Bb(2),r.ic("example",t.exampleNumeric),r.Bb(4),r.ic("ngModel",t.prefilledText),r.Bb(2),r.yc("ngModel: ",t.prefilledText," "),r.Bb(1),r.ic("example",t.examplePrefilled),r.Bb(8),r.ic("example",t.exampleRtl),r.Bb(12),r.ic("example",t.exampleDateTime),r.Bb(9),r.ic("example",t.exampleFullWithSingleLine)}},directives:[u.a,f.a,p.a,d.q,d.k,d.e,h.a,d.j,d.c,d.l,d.m,d.o,x.b,v.a,g.a],pipes:[y.f],encapsulation:2}),e})()}]}];let T=(()=>{class e{}return e.\u0275mod=r.Jb({type:e}),e.\u0275inj=r.Ib({factory:function(t){return new(t||e)},imports:[[l.e.forChild(F)],l.e]}),e})(),S=(()=>{class e{}return e.\u0275mod=r.Jb({type:e}),e.\u0275inj=r.Ib({factory:function(t){return new(t||e)},imports:[[i.a,T]]}),e})()}}]);